<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADSD</name>
    </assembly>
    <members>
        <member name="T:ADSD.AadSecurityCheck">
            <summary>
            Verify security with Azure Active Directory
            </summary>
        </member>
        <member name="M:ADSD.AadSecurityCheck.#ctor(ADSD.SecurityConfig)">
            <summary>
            Setup a security token checker
            </summary>
        </member>
        <member name="M:ADSD.AadSecurityCheck.Validate(System.String)">
            <summary>
            Read authentication headers and check them against an AAD server.
            </summary>
        </member>
        <member name="T:ADSD.AsymmetricSecurityKey">
            <summary>Base class for asymmetric keys.</summary>
        </member>
        <member name="M:ADSD.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
            <summary>When overridden in a derived class, gets the specified asymmetric cryptographic algorithm. </summary>
            <param name="algorithm">The asymmetric algorithm to create.</param>
            <param name="privateKey">
            <see langword="true" /> when a private key is required to create the algorithm; otherwise, <see langword="false" />. </param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that represents the specified asymmetric cryptographic algorithm.Typically, <see langword="true" /> is passed into the <paramref name="privateKey" /> parameter, as a private key is typically required for decryption.</returns>
        </member>
        <member name="M:ADSD.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
            <summary>When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.</summary>
            <param name="algorithm">The hash algorithm.</param>
            <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> that generates hashes for digital signatures.</returns>
        </member>
        <member name="M:ADSD.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
            <summary>When overridden in a derived class, gets the deformatter algorithm for the digital signature.</summary>
            <param name="algorithm">The deformatter algorithm for the digital signature.</param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the deformatter algorithm for the digital signature.</returns>
        </member>
        <member name="M:ADSD.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
            <summary>When overridden in a derived class, gets the formatter algorithm for the digital signature.</summary>
            <param name="algorithm">The formatter algorithm for the digital signature.</param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> that represents the formatter algorithm for the digital signature.</returns>
        </member>
        <member name="M:ADSD.AsymmetricSecurityKey.HasPrivateKey">
            <summary>When overridden in a derived class, gets a value that indicates whether the private key is available.</summary>
            <returns>
            <see langword="true" /> when the private key is available; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="T:ADSD.AsymmetricSignatureProvider">
            <summary>
            Provides signing and verifying operations when working with an <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />
            </summary>
        </member>
        <member name="M:ADSD.AsymmetricSignatureProvider.#ctor(ADSD.AsymmetricSecurityKey,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.AsymmetricSignatureProvider" /> class used to create and verify signatures.
            </summary>
            <param name="key">
            The <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> that will be used for cryptographic operations.
            </param>
            <param name="algorithm">The signature algorithm to apply.</param>
            <param name="willCreateSignatures">
            If this <see cref="T:System.IdentityModel.Tokens.AsymmetricSignatureProvider" /> is required to create signatures then set this to true.
            <para>
            Creating signatures requires that the <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> has access to a private key.
            Verifying signatures (the default), does not require access to the private key.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            'key' is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            'algorithm' is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            'algorithm' contains only whitespace.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            willCreateSignatures is true and <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />.KeySize is less than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForSigning" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />.KeySize is less than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForVerifying" />. Note: this is always checked.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)" /> throws.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)" /> returns null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)" /> throws.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)" /> returns null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)" /> throws.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)" /> returns null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)" /> throws.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if the <see cref="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)" /> throws.
            </exception>
        </member>
        <member name="M:ADSD.AsymmetricSignatureProvider.Sign(System.Byte[])">
            <summary>
            Produces a signature over the 'input' using the <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> and algorithm passed to <see cref="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.AsymmetricSecurityKey,System.String,System.Boolean)" />.
            </summary>
            <param name="input">bytes to be signed.</param>
            <returns>a signature over the input.</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null. </exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0. </exception>
            <exception cref="T:System.ObjectDisposedException">if <see cref="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Dispose(System.Boolean)" /> has been called. </exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> is null. This can occur if the constructor parameter 'willBeUsedforSigning' was not 'true'.</exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.HashAlgorithm" /> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:ADSD.AsymmetricSignatureProvider.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies that a signature over the' input' matches the signature.
            </summary>
            <param name="input">the bytes to generate the signature over.</param>
            <param name="signature">the value to verify against.</param>
            <returns>true if signature matches, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'signature' is null.</exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0.</exception>
            <exception cref="T:System.ArgumentException">'signature.Length' == 0.</exception>
            <exception cref="T:System.ObjectDisposedException">if <see cref="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Dispose(System.Boolean)" /> has been called. </exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> is null. This can occur if a derived type does not call the base constructor.</exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.HashAlgorithm" /> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:ADSD.AsymmetricSignatureProvider.Dispose(System.Boolean)">
            <summary>
            Calls <see cref="M:System.Security.Cryptography.HashAlgorithm.Dispose" /> to release this managed resources.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer.</param>
        </member>
        <member name="T:ADSD.Base64UrlEncoder">
            <summary>Encodes and Decodes strings as Base64Url encoding.</summary>
        </member>
        <member name="M:ADSD.Base64UrlEncoder.Encode(System.String)">
            <summary>
            The following functions perform base64url encoding which differs from regular base64 encoding as follows
            * padding is skipped so the pad character '=' doesn't have to be percent encoded
            * the 62nd and 63rd regular base64 encoding characters ('+' and '/') are replace with ('-' and '_')
            The changes make the encoding alphabet file and URL safe.
            </summary>
            <param name="arg">string to encode.</param>
            <returns>Base64Url encoding of the UTF8 bytes.</returns>
        </member>
        <member name="M:ADSD.Base64UrlEncoder.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64-url digits. Parameters specify
            the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="length">An offset in inArray.</param>
            <param name="offset">The number of elements of inArray to convert.</param>
            <returns>The string representation in base 64 url encodingof length elements of inArray, starting at position offset.</returns>
            <exception cref="T:System.ArgumentNullException">'inArray' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>
        </member>
        <member name="M:ADSD.Base64UrlEncoder.Encode(System.Byte[])">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64-url digits. Parameters specify
            the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <returns>The string representation in base 64 url encodingof length elements of inArray, starting at position offset.</returns>
            <exception cref="T:System.ArgumentNullException">'inArray' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>
        </member>
        <member name="M:ADSD.Base64UrlEncoder.DecodeBytes(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64-url digits, to an equivalent 8-bit unsigned integer array.</summary>
            <param name="str">base64Url encoded string.</param>
            <returns>UTF8 bytes.</returns>
        </member>
        <member name="M:ADSD.Base64UrlEncoder.Decode(System.String)">
            <summary>Decodes the string from Base64UrlEncoded to UTF8.</summary>
            <param name="arg">string to decode.</param>
            <returns>UTF8 string.</returns>
        </member>
        <member name="T:ADSD.BinaryKeyIdentifierClause">
            <summary>Represents a base class for key identifier clauses that are based upon binary data.</summary>
        </member>
        <member name="M:ADSD.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> class using the specified key identifier clause type, binary data and a value that indicates whether the binary data must be cloned. </summary>
            <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
            <param name="identificationData">An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier.</param>
            <param name="cloneBuffer">
            <see langword="true" /> to clone the array passed into the <paramref name="identificationData" /> parameter; otherwise, <see langword="false" />. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="identificationData" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="identificationData" /> is zero length.</exception>
        </member>
        <member name="M:ADSD.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean,System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> class using the specified key identifier clause type, binary data, a value that indicates whether the binary data must be cloned, a nonce and the key length.</summary>
            <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
            <param name="identificationData">An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier. Sets the binary data that is returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method.</param>
            <param name="cloneBuffer">
            <see langword="true" /> to clone the array passed into the <paramref name="identificationData" /> parameter; otherwise, <see langword="false" />. </param>
            <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
            <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="identificationData" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="identificationData" /> is zero length.</exception>
        </member>
        <member name="M:ADSD.BinaryKeyIdentifierClause.GetBuffer">
            <summary>Gets the binary data that represents the key identifier.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier.</returns>
        </member>
        <member name="M:ADSD.BinaryKeyIdentifierClause.GetRawBuffer">
            <summary>Gets the binary data that represents the key identifier.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the binary data that represents the key identifier.</returns>
        </member>
        <member name="M:ADSD.BinaryKeyIdentifierClause.Matches(ADSD.SecurityKeyIdentifierClause)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
            <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
            <returns>
            <see langword="true" /> if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> and the binary data returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method is identical for the <paramref name="keyIdentifierClause" /> parameter and the current instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.BinaryKeyIdentifierClause.Matches(System.Byte[])">
            <summary>Returns a value that indicates whether the binary data for the current instance matches the specified binary data.</summary>
            <param name="data">An array of <see cref="T:System.Byte" /> to compare to.</param>
            <returns>
            <see langword="true" /> if <paramref name="data " />is equivalent to the binary data returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.BinaryKeyIdentifierClause.Matches(System.Byte[],System.Int32)">
            <summary>Returns a value that indicates whether the binary data for the current instance is equivalent to the specified binary data at the specified offset.</summary>
            <param name="data">An array of <see cref="T:System.Byte" /> to compare to.</param>
            <param name="offset">The index in the array at which the comparison starts.</param>
            <returns>
            <see langword="true" /> if the binary data in the <paramref name="data " />parameter starting at the index specified in the <paramref name="offset" /> parameter is equivalent to the binary data returned by the <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> method (starting at index zero); otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:ADSD.BinarySecretKeyIdentifierClause">
            <summary>Represents the key identifier clause in a binary secret security token.</summary>
        </member>
        <member name="M:ADSD.BinarySecretKeyIdentifierClause.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class using the specified key.</summary>
            <param name="key">A <see cref="T:System.Byte" /> array that represents the key.</param>
        </member>
        <member name="M:ADSD.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class using the specified values.</summary>
            <param name="key">A <see cref="T:System.Byte" /> array that represents the key.</param>
            <param name="cloneBuffer">
            <see langword="true" /> to clone the buffer; otherwise, <see langword="false" />.</param>
        </member>
        <member name="M:ADSD.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean,System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class using the specified values.</summary>
            <param name="key">A <see cref="T:System.Byte" /> array that represents the key.</param>
            <param name="cloneBuffer">
            <see langword="true" /> to clone the buffer; otherwise, <see langword="false" />.</param>
            <param name="derivationNonce">The "number used once" (nonce) used to derive the key.</param>
            <param name="derivationLength">The length of the key to be derived.</param>
        </member>
        <member name="M:ADSD.BinarySecretKeyIdentifierClause.GetKeyBytes">
            <summary>Gets an array of bytes that represents the key.</summary>
            <returns>An array of bytes that represents the key.</returns>
        </member>
        <member name="P:ADSD.BinarySecretKeyIdentifierClause.CanCreateKey">
            <summary>Gets a value that indicates whether this instance of the class can create a security key.</summary>
            <returns>Always <see langword="true" />.</returns>
        </member>
        <member name="M:ADSD.BinarySecretKeyIdentifierClause.CreateKey">
            <summary>Creates a security key.</summary>
            <returns>The newly created security key.</returns>
        </member>
        <member name="M:ADSD.BinarySecretKeyIdentifierClause.Matches(ADSD.SecurityKeyIdentifierClause)">
            <summary>Compares whether the key of a specified clause matches this instance's key.</summary>
            <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to match.</param>
            <returns>
            <see langword="true" /> if there is a match; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:ADSD.BootstrapContext">
            <summary>Contains a serialized version of the original token that was used at sign-in time.</summary>
        </member>
        <member name="M:ADSD.BootstrapContext.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> class from a stream.</summary>
            <param name="info">The serialized data.</param>
            <param name="context">The context for serialization.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info" /> is null.</exception>
        </member>
        <member name="M:ADSD.BootstrapContext.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> class by using the specified string.</summary>
            <param name="token">A string that represents the token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="token" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.BootstrapContext.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> class by using the specified array.</summary>
            <param name="token">An array that represents the token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="token" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.BootstrapContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with data needed to serialize the current <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> object.</summary>
            <param name="info">The object to populate with data.</param>
            <param name="context">The destination for this serialization. Can be <see langword="null" />.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.BootstrapContext.TokenBytes">
            <summary>Gets the array that was used to initialize the context.</summary>
            <returns>The array that was used to initialize the context or <see langword="null" />.</returns>
        </member>
        <member name="P:ADSD.BootstrapContext.Token">
            <summary>Gets the string that was used to initialize the context.</summary>
            <returns>The string that was used to initialize the context or <see langword="null" />.</returns>
        </member>
        <member name="T:ADSD.CipherData">
            <summary>
            CipherData
            </summary>
        </member>
        <member name="M:ADSD.CipherData.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> class.</summary>
        </member>
        <member name="M:ADSD.CipherData.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> class using a byte array as the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> value.</summary>
            <param name="cipherValue">The encrypted data to use for the <see langword="&lt;CipherValue&gt;" /> element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cipherValue" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property has already been set.</exception>
        </member>
        <member name="M:ADSD.CipherData.#ctor(ADSD.CipherReference)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> class using a <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object.</summary>
            <param name="cipherReference">The <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object to use.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property has already been set.</exception>
        </member>
        <member name="P:ADSD.CipherData.CipherReference">
            <summary>Gets or sets the <see langword="&lt;CipherReference&gt;" /> element.</summary>
            <returns>A <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />  property was set to <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />  property was set more than once.</exception>
        </member>
        <member name="P:ADSD.CipherData.CipherValue">
            <summary>Gets or sets the <see langword="&lt;CipherValue&gt;" /> element.</summary>
            <returns>A byte array that represents the <see langword="&lt;CipherValue&gt;" /> element.</returns>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />  property was set to <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />  property was set more than once.</exception>
        </member>
        <member name="M:ADSD.CipherData.GetXml">
            <summary>Gets the XML values for the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</summary>
            <returns>A <see cref="T:System.Xml.XmlElement" /> object that represents the XML information for the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property and the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" /> property are <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.CipherData.LoadXml(System.Xml.XmlElement)">
            <summary>Loads XML data from an <see cref="T:System.Xml.XmlElement" /> into a <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> that represents the XML data to load.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property and the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" /> property are <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.CipherReference">
            <summary>
            CipherReference
            </summary>
        </member>
        <member name="M:ADSD.CipherReference.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> class.</summary>
        </member>
        <member name="M:ADSD.CipherReference.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> class using the specified Uniform Resource Identifier (URI).</summary>
            <param name="uri">A Uniform Resource Identifier (URI) pointing to the encrypted data.</param>
        </member>
        <member name="M:ADSD.CipherReference.#ctor(System.String,ADSD.TransformChain)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> class using the specified Uniform Resource Identifier (URI) and transform chain information.</summary>
            <param name="uri">A Uniform Resource Identifier (URI) pointing to the encrypted data.</param>
            <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms to do on the encrypted data.</param>
        </member>
        <member name="M:ADSD.CipherReference.GetXml">
            <summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object.</summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the <see langword="&lt;CipherReference&gt;" /> element in XML encryption.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> value is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.CipherReference.LoadXml(System.Xml.XmlElement)">
            <summary>Loads XML information into the <see langword="&lt;CipherReference&gt;" /> element in XML encryption.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> object that represents an XML element to use as the reference.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> provided is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.ClaimTypeMapping">
            <summary>
            Defines the inbound and outbound mapping for claim claim types from jwt to .net claim
            </summary>
        </member>
        <member name="P:ADSD.ClaimTypeMapping.InboundClaimTypeMap">
            <summary>
            Gets the InboundClaimTypeMap used by JwtSecurityTokenHandler when producing claims from jwt.
            </summary>
        </member>
        <member name="P:ADSD.ClaimTypeMapping.OutboundClaimTypeMap">
            <summary>
            Gets the OutboundClaimTypeMap is used by JwtSecurityTokenHandler to shorten claim types when creating a jwt.
            </summary>
        </member>
        <member name="T:ADSD.ConfigurationBasedIssuerNameRegistry">
            <summary>Represents an issuer name registry that maintains a list of trusted issuers loaded from elements in the application configuration file that associate each issuer name to the X.509 certificate that is needed to verify the signature of tokens produced by the issuer.</summary>
        </member>
        <member name="M:ADSD.ConfigurationBasedIssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)">
            <summary>Loads the trusted issuers from configuration.</summary>
            <param name="customConfiguration">The XML that represents the map of trusted issuers that is specified in the configuration file.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="customConfiguration" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">The configuration contains one or more elements that are not recognized.</exception>
        </member>
        <member name="M:ADSD.ConfigurationBasedIssuerNameRegistry.GetIssuerName(ADSD.SecurityToken)">
            <summary>Returns the issuer name associated with the specified <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> by mapping the certificate thumbprint to a name in the trusted issuers dictionary.</summary>
            <param name="securityToken">The security token for which the issuer name is requested. Should be assignable as <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />.</param>
            <returns>The issuer name if an entry for the certificate thumbprint of the token exists in the <see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> dictionary; otherwise, <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="securityToken" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers">
            <summary>Gets the dictionary of trusted issuers that have been configured for this instance. </summary>
            <returns>A dictionary that contains the trusted issuers.</returns>
        </member>
        <member name="M:ADSD.ConfigurationBasedIssuerNameRegistry.AddTrustedIssuer(System.String,System.String)">
            <summary>Adds an issuer to the dictionary of trusted issuers.</summary>
            <param name="certificateThumbprint">ASN.1 encoded form of the issuer's certificate thumbprint.</param>
            <param name="name">The name of the issuer.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="certificateThumbprint" /> is <see langword="null" /> or empty.-or-
            <paramref name="name" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.InvalidOperationException">The issuer specified by <paramref name="certificateThumbprint" /> has already been configured. (The issuer already exists in the <see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> dictionary.)</exception>
        </member>
        <member name="T:ADSD.DataObject">
            <summary>Represents the object element of an XML signature that holds data to be signed.</summary>
        </member>
        <member name="M:ADSD.DataObject.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> class.</summary>
        </member>
        <member name="M:ADSD.DataObject.#ctor(System.String,System.String,System.String,System.Xml.XmlElement)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> class with the specified identification, MIME type, encoding, and data.</summary>
            <param name="id">The identification to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" /> with. </param>
            <param name="mimeType">The MIME type of the data used to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />. </param>
            <param name="encoding">The encoding of the data used to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />. </param>
            <param name="data">The data to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" /> with. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> parameter is <see langword="null" />. </exception>
        </member>
        <member name="P:ADSD.DataObject.Id">
            <summary>Gets or sets the identification of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
            <returns>The name of the element that contains data to be used. </returns>
        </member>
        <member name="P:ADSD.DataObject.MimeType">
            <summary>Gets or sets the MIME type of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object. </summary>
            <returns>The MIME type of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object. The default is <see langword="null" />.</returns>
        </member>
        <member name="P:ADSD.DataObject.Encoding">
            <summary>Gets or sets the encoding of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
            <returns>The type of encoding of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</returns>
        </member>
        <member name="P:ADSD.DataObject.Data">
            <summary>Gets or sets the data value of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
            <returns>The data of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />.</returns>
            <exception cref="T:System.ArgumentNullException">The value used to set the property is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.DataObject.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</returns>
        </member>
        <member name="M:ADSD.DataObject.LoadXml(System.Xml.XmlElement)">
            <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.DataObject" /> state from an XML element.</summary>
            <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> state from. </param>
            <exception cref="T:System.ArgumentNullException">The value from the XML element is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.DataReference">
            <summary>Represents the <see langword="&lt;DataReference&gt;" /> element used in XML encryption. This class cannot be inherited.</summary>
        </member>
        <member name="M:ADSD.DataReference.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> class.</summary>
        </member>
        <member name="M:ADSD.DataReference.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> class using the specified Uniform Resource Identifier (URI).</summary>
            <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted data.</param>
        </member>
        <member name="M:ADSD.DataReference.#ctor(System.String,ADSD.TransformChain)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> class using the specified Uniform Resource Identifier (URI) and a <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</summary>
            <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted data.</param>
            <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms to do on the encrypted data.</param>
        </member>
        <member name="T:ADSD.DateTimeUtil">
            <summary>Helper class for adding DateTimes and Timespans.</summary>
        </member>
        <member name="M:ADSD.DateTimeUtil.Add(System.DateTime,System.TimeSpan)">
            <summary>
            Add a DateTime and a TimeSpan.
            The maximum time is DateTime.MaxTime.  It is not an error if time + timespan &gt; MaxTime.
            Just return MaxTime.
            </summary>
            <param name="time">Initial <see cref="T:System.DateTime" /> value.</param>
            <param name="timespan"><see cref="T:System.TimeSpan" /> to add.</param>
            <returns><see cref="T:System.DateTime" /> as the sum of time and timespan.</returns>
        </member>
        <member name="M:ADSD.DateTimeUtil.GetMaxValue(System.DateTimeKind)">
            <summary>
            Gets the Maximum value for a DateTime specifying kind.
            </summary>
            <param name="kind">DateTimeKind to use.</param>
            <returns>DateTime of specified kind.</returns>
        </member>
        <member name="M:ADSD.DateTimeUtil.GetMinValue(System.DateTimeKind)">
            <summary>
            Gets the Minimum value for a DateTime specifying kind.
            </summary>
            <param name="kind">DateTimeKind to use.</param>
            <returns>DateTime of specified kind.</returns>
        </member>
        <member name="T:ADSD.DisposingContainer`1">
            <summary>
            A wrapper around List, which calls `Dispose` on contained items when they are removed, replaced, or the list itself is disposed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ADSD.DisposingContainer`1.#ctor">
            <summary>
            Create a new disposing container
            </summary>
        </member>
        <member name="M:ADSD.DisposingContainer`1.Dispose">
            <summary>
            Dispose of the container, and call dispose on all contents
            </summary>
        </member>
        <member name="M:ADSD.DisposingContainer`1.GetEnumerator">
            <summary>
            Get an iterator for the contained objects
            </summary>
        </member>
        <member name="M:ADSD.DisposingContainer`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:ADSD.DisposingContainer`1.Clear">
            <summary>
            Dispose all contained items then clear
            </summary>
        </member>
        <member name="M:ADSD.DisposingContainer`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:ADSD.DisposingContainer`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ADSD.DisposingContainer`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:ADSD.DisposingContainer`1.Count">
            <inheritdoc />
        </member>
        <member name="P:ADSD.DisposingContainer`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:ADSD.DSAKeyValue">
            <summary>Represents the <see cref="T:System.Security.Cryptography.DSA" /> private key of the <see langword="&lt;KeyInfo&gt;" /> element.</summary>
        </member>
        <member name="M:ADSD.DSAKeyValue.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> class with a new, randomly-generated <see cref="T:System.Security.Cryptography.DSA" /> public key.</summary>
        </member>
        <member name="M:ADSD.DSAKeyValue.#ctor(System.Security.Cryptography.DSA)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> class with the specified <see cref="T:System.Security.Cryptography.DSA" /> public key.</summary>
            <param name="key">The instance of an implementation of the <see cref="T:System.Security.Cryptography.DSA" /> class that holds the public key. </param>
        </member>
        <member name="P:ADSD.DSAKeyValue.Key">
            <summary>Gets or sets the key value represented by a <see cref="T:System.Security.Cryptography.DSA" /> object.</summary>
            <returns>The public key represented by a <see cref="T:System.Security.Cryptography.DSA" /> object.</returns>
        </member>
        <member name="M:ADSD.DSAKeyValue.GetXml">
            <summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> element.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> element.</returns>
        </member>
        <member name="M:ADSD.DSAKeyValue.LoadXml(System.Xml.XmlElement)">
            <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> state from an XML element.</summary>
            <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> state from. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter is not a valid <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> XML element. </exception>
        </member>
        <member name="T:ADSD.EncryptedKey">
            <summary>Represents the <see langword="&lt;EncryptedKey&gt;" /> element in XML encryption. This class cannot be inherited.</summary>
        </member>
        <member name="P:ADSD.EncryptedKey.Recipient">
            <summary>Gets or sets the optional <see langword="Recipient" /> attribute in XML encryption.</summary>
            <returns>A string representing the value of the <see langword="Recipient" /> attribute.</returns>
        </member>
        <member name="P:ADSD.EncryptedKey.CarriedKeyName">
            <summary>Gets or sets the optional <see langword="&lt;CarriedKeyName&gt;" /> element in XML encryption.</summary>
            <returns>A string that represents a name for the key value.</returns>
        </member>
        <member name="P:ADSD.EncryptedKey.ReferenceList">
            <summary>Gets or sets the <see langword="&lt;ReferenceList&gt;" /> element in XML encryption.</summary>
            <returns>A <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object.</returns>
        </member>
        <member name="M:ADSD.EncryptedKey.AddReference(ADSD.DataReference)">
            <summary>Adds a <see langword="&lt;DataReference&gt; " />element to the <see langword="&lt;ReferenceList&gt;" /> element.</summary>
            <param name="dataReference">A <see cref="T:System.Security.Cryptography.Xml.DataReference" /> object to add to the <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" /> property.</param>
        </member>
        <member name="M:ADSD.EncryptedKey.AddReference(ADSD.KeyReference)">
            <summary>Adds a <see langword="&lt;KeyReference&gt; " />element to the <see langword="&lt;ReferenceList&gt;" /> element.</summary>
            <param name="keyReference">A <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to add to the <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" /> property.</param>
        </member>
        <member name="M:ADSD.EncryptedKey.LoadXml(System.Xml.XmlElement)">
            <summary>Loads the specified XML information into the <see langword="&lt;EncryptedKey&gt;" /> element in XML encryption.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> representing an XML element to use for the <see langword="&lt;EncryptedKey&gt;" /> element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter does not contain a <see cref="T:System.Security.Cryptography.Xml.CipherData" />  element.</exception>
        </member>
        <member name="M:ADSD.EncryptedKey.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object.</summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the <see langword="&lt;EncryptedKey&gt;" /> element in XML encryption.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> value is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.EncryptedKeyIdentifierClause">
            <summary>Represents a key identifier clause that identifies an encrypted key.</summary>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted and the cryptographic algorithm used to encrypt the key.</summary>
            <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
            <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="encryptionMethod" /> is <see langword="null" />.-or-
            <paramref name="encryptedKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="encryptedKey" /> is zero length.</exception>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,ADSD.SecurityKeyIdentifier)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted, the cryptographic algorithm used to encrypt the key, and a key identifier for the encrypting key.</summary>
            <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
            <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
            <param name="encryptingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the encrypting key that is specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="encryptionMethod" /> is <see langword="null" />.-or-
            <paramref name="encryptedKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="encryptedKey" /> is zero length.</exception>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,ADSD.SecurityKeyIdentifier,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted, the cryptographic algorithm used to encrypt the key, a key identifier for the encrypting key and a user-readable name.</summary>
            <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
            <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
            <param name="encryptingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the encrypting key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> property.</param>
            <param name="carriedKeyName">A user-readable name that is associated with the key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="encryptionMethod" /> is <see langword="null" />.-or-
            <paramref name="encryptedKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="encryptedKey" /> is zero length.</exception>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,ADSD.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> class using the specified key that is encrypted, the cryptographic algorithm used to encrypt the key, a key identifier for the key and a user-readable name.</summary>
            <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted. Sets the value that is returned from the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method.</param>
            <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> property.</param>
            <param name="encryptingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> property.</param>
            <param name="carriedKeyName">A user-readable name that is associated with the key specified in the <paramref name="encryptedKey" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> property.</param>
            <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
            <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="encryptionMethod" /> is <see langword="null" />.-or-
            <paramref name="encryptedKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="encryptedKey" /> is zero length.</exception>
        </member>
        <member name="P:ADSD.EncryptedKeyIdentifierClause.CarriedKeyName">
            <summary>Gets a user-readable name that is associated with the encrypted key.</summary>
            <returns>A user-readable name that is associated with the encrypted key.</returns>
        </member>
        <member name="P:ADSD.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier">
            <summary>Gets a key identifier for the encrypting key.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier for the encrypting key.</returns>
        </member>
        <member name="P:ADSD.EncryptedKeyIdentifierClause.EncryptionMethod">
            <summary>Gets the cryptographic algorithm that is used to encrypt the key.</summary>
            <returns>The cryptographic algorithm that is used to encrypt the key.</returns>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.Matches(ADSD.SecurityKeyIdentifierClause)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
            <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
            <returns>
            <see langword="true" /> if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> and has the same encrypted key, encryption method and user-readable name as the current instance; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="keyIdentifierClause" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.Matches(System.Byte[],System.String,System.String)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified encrypted key, encryption method and user-readable name.</summary>
            <param name="encryptedKey">An array of <see cref="T:System.Byte" /> that contains a key that is encrypted.</param>
            <param name="encryptionMethod">The cryptographic algorithm that is used to encrypt the key. </param>
            <param name="carriedKeyName">A user-readable name that is associated with the encrypted key.</param>
            <returns>
            <see langword="true" /> if the <paramref name="encryptedKey" />, <paramref name="encryptionMethod" /> and <paramref name="carriedKeyName" /> parameters have the same values returned by the <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> method and the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> and the <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> properties, respectively; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.GetEncryptedKey">
            <summary>Gets the encrypted key.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
        </member>
        <member name="M:ADSD.EncryptedKeyIdentifierClause.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>The current object.</returns>
        </member>
        <member name="T:ADSD.EncryptedReference">
            <summary>
            EncryptedReference
            </summary>
        </member>
        <member name="M:ADSD.EncryptedReference.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> class.</summary>
        </member>
        <member name="M:ADSD.EncryptedReference.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> class using the specified Uniform Resource Identifier (URI).</summary>
            <param name="uri">The Uniform Resource Identifier (URI) that points to the data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedReference.#ctor(System.String,ADSD.TransformChain)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> class using the specified Uniform Resource Identifier (URI) and transform chain.</summary>
            <param name="uri">The Uniform Resource Identifier (URI) that points to the data to encrypt.</param>
            <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms to be done on the data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.EncryptedReference.Uri">
            <summary>Gets or sets the Uniform Resource Identifier (URI) of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
            <returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.Uri" /> property was set to <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.EncryptedReference.TransformChain">
            <summary>Gets or sets the transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
            <returns>A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms used on the encrypted data.</returns>
        </member>
        <member name="M:ADSD.EncryptedReference.AddTransform(ADSD.Transform)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" /> object to the current transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
            <param name="transform">A <see cref="T:System.Security.Cryptography.Xml.Transform" /> object to add to the transform chain.</param>
        </member>
        <member name="P:ADSD.EncryptedReference.ReferenceType">
            <summary>Gets or sets a reference type.</summary>
            <returns>The reference type of the encrypted data.</returns>
        </member>
        <member name="P:ADSD.EncryptedReference.CacheValid">
            <summary>Gets a value that indicates whether the cache is valid.</summary>
            <returns>
            <see langword="true" /> if the cache is valid; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.EncryptedReference.GetXml">
            <summary>Returns the XML representation of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> object that represents the values of the <see langword="&lt;EncryptedReference&gt;" /> element in XML encryption.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.ReferenceType" /> property is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedReference.LoadXml(System.Xml.XmlElement)">
            <summary>Loads an XML element into an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> object that represents an XML element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.EncryptedType">
            <summary>Represents the abstract base class from which the classes <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> and <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> derive.</summary>
        </member>
        <member name="P:ADSD.EncryptedType.Id">
            <summary>Gets or sets the <see langword="Id" /> attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
            <returns>A string of the <see langword="Id" /> attribute of the <see langword="&lt;EncryptedType&gt;" /> element.</returns>
        </member>
        <member name="P:ADSD.EncryptedType.Type">
            <summary>Gets or sets the <see langword="Type" /> attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
            <returns>A string that describes the text form of the encrypted data.</returns>
        </member>
        <member name="P:ADSD.EncryptedType.MimeType">
            <summary>Gets or sets the <see langword="MimeType" /> attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
            <returns>A string that describes the media type of the encrypted data.</returns>
        </member>
        <member name="P:ADSD.EncryptedType.Encoding">
            <summary>Gets or sets the <see langword="Encoding" /> attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
            <returns>A string that describes the encoding of the encrypted data.</returns>
        </member>
        <member name="P:ADSD.EncryptedType.KeyInfo">
            <summary>Gets of sets the <see langword="&lt;KeyInfo&gt;" /> element in XML encryption.</summary>
            <returns>A <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptedType.EncryptionMethod">
            <summary>Gets or sets the <see langword="&lt;EncryptionMethod&gt;" /> element for XML encryption.</summary>
            <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> object that represents the <see langword="&lt;EncryptionMethod&gt;" /> element.</returns>
        </member>
        <member name="P:ADSD.EncryptedType.EncryptionProperties">
            <summary>Gets or sets the <see langword="&lt;EncryptionProperties&gt;" /> element in XML encryption.</summary>
            <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
        </member>
        <member name="M:ADSD.EncryptedType.AddProperty(ADSD.EncryptionProperty)">
            <summary>Adds an <see langword="&lt;EncryptionProperty&gt;" /> child element to the <see langword="&lt;EncryptedProperties&gt;" /> element in the current <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> object in XML encryption.</summary>
            <param name="ep">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</param>
        </member>
        <member name="P:ADSD.EncryptedType.CipherData">
            <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> value for an instance of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> class.</summary>
            <returns>A <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedType.CipherData" /> property was set to <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedType.LoadXml(System.Xml.XmlElement)">
            <summary>Loads XML information into the <see langword="&lt;EncryptedType&gt;" /> element in XML encryption.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> object representing an XML element to use in the <see langword="&lt;EncryptedType&gt;" /> element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> provided is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedType.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> object.</summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> object that represents the <see langword="&lt;EncryptedType&gt;" /> element in XML encryption.</returns>
        </member>
        <member name="T:ADSD.EncryptedData">
            <summary>
            
            </summary>
        </member>
        <member name="M:ADSD.EncryptedData.LoadXml(System.Xml.XmlElement)">
            <summary>Loads XML information into the <see langword="&lt;EncryptedData&gt;" /> element in XML encryption.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> object representing an XML element to use for the <see langword="&lt;EncryptedData&gt;" /> element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> provided is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter does not contain a &lt;<see langword="CypherData" />&gt; node.</exception>
        </member>
        <member name="M:ADSD.EncryptedData.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the <see langword="&lt;EncryptedData&gt;" /> element in XML encryption.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> value is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.EncryptedXml">
            <summary>Represents the process model for implementing XML encryption.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncNamespaceUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for XML encryption syntax and processing. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncElementUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for an XML encryption element. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncElementContentUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for XML encryption element content. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncEncryptedKeyUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the XML encryption <see langword="&lt;EncryptedKey&gt;" /> element. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncDESUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the Digital Encryption Standard (DES) algorithm. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncTripleDESUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the Triple DES algorithm. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncAES128Url">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the 128-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncAES256Url">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the 256-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncAES192Url">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the 192-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncRSA15Url">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the RSA Public Key Cryptography Standard (PKCS) Version 1.5 algorithm. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncRSAOAEPUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the RSA Optimal Asymmetric Encryption Padding (OAEP) encryption algorithm. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncTripleDESKeyWrapUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the TRIPLEDES key wrap algorithm. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncAES128KeyWrapUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the 128-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant. </summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncAES256KeyWrapUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the 256-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncAES192KeyWrapUrl">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the 192-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncSHA256Url">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the SHA-256 algorithm. This field is constant.</summary>
        </member>
        <member name="F:ADSD.EncryptedXml.XmlEncSHA512Url">
            <summary>Represents the namespace Uniform Resource Identifier (URI) for the SHA-512 algorithm. This field is constant.</summary>
        </member>
        <member name="M:ADSD.EncryptedXml.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class.</summary>
        </member>
        <member name="M:ADSD.EncryptedXml.#ctor(System.Xml.XmlDocument)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class using the specified XML document.</summary>
            <param name="document">An <see cref="T:System.Xml.XmlDocument" /> object used to initialize the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object.</param>
        </member>
        <member name="M:ADSD.EncryptedXml.#ctor(System.Xml.XmlDocument,ADSD.Evidence)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class using the specified XML document and evidence.</summary>
            <param name="document">An <see cref="T:System.Xml.XmlDocument" /> object used to initialize the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object.</param>
            <param name="evidence">An <see cref="T:System.Security.Policy.Evidence" /> object associated with the <see cref="T:System.Xml.XmlDocument" /> object.</param>
        </member>
        <member name="P:ADSD.EncryptedXml.XmlDSigSearchDepth">
            <summary>Gets or sets the XML digital signature recursion depth to prevent infinite recursion and stack overflow. This might happen if the digital signature XML contains the URI which then points back to the original XML. </summary>
            <returns>Returns <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="P:ADSD.EncryptedXml.DocumentEvidence">
            <summary>Gets or sets the evidence of the <see cref="T:System.Xml.XmlDocument" /> object from which the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object is constructed.</summary>
            <returns>An <see cref="T:System.Security.Policy.Evidence" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptedXml.Resolver">
            <summary>Gets or sets the <see cref="T:System.Xml.XmlResolver" /> object used by the Document Object Model (DOM) to resolve external XML references.</summary>
            <returns>An <see cref="T:System.Xml.XmlResolver" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptedXml.Padding">
            <summary>Gets or sets the padding mode used for XML encryption.</summary>
            <returns>One of the <see cref="T:System.Security.Cryptography.PaddingMode" /> values that specifies the type of padding used for encryption.</returns>
        </member>
        <member name="P:ADSD.EncryptedXml.Mode">
            <summary>Gets or sets the cipher mode used for XML encryption.</summary>
            <returns>One of the <see cref="T:System.Security.Cryptography.CipherMode" /> values.</returns>
        </member>
        <member name="P:ADSD.EncryptedXml.Encoding">
            <summary>Gets or sets the encoding used for XML encryption.</summary>
            <returns>An <see cref="T:System.Text.Encoding" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptedXml.Recipient">
            <summary>Gets or sets the recipient of the encrypted key information.</summary>
            <returns>The recipient of the encrypted key information.</returns>
        </member>
        <member name="M:ADSD.EncryptedXml.GetIdElement(System.Xml.XmlDocument,System.String)">
            <summary>Determines how to resolve internal Uniform Resource Identifier (URI) references.</summary>
            <param name="document">An <see cref="T:System.Xml.XmlDocument" /> object that contains an element with an ID value.</param>
            <param name="idValue">A string that represents the ID value.</param>
            <returns>An <see cref="T:System.Xml.XmlElement" /> object that contains an ID indicating how internal Uniform Resource Identifiers (URIs) are to be resolved.</returns>
        </member>
        <member name="M:ADSD.EncryptedXml.GetDecryptionIV(ADSD.EncryptedData,System.String)">
            <summary>Retrieves the decryption initialization vector (IV) from an <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
            <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object that contains the initialization vector (IV) to retrieve.</param>
            <param name="symmetricAlgorithmUri">The Uniform Resource Identifier (URI) that describes the cryptographic algorithm associated with the <paramref name="encryptedData" /> value.</param>
            <returns>A byte array that contains the decryption initialization vector (IV).</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.GetDecryptionKey(ADSD.EncryptedData,System.String)">
            <summary>Retrieves the decryption key from the specified <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
            <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object that contains the decryption key to retrieve.</param>
            <param name="symmetricAlgorithmUri">The size of the decryption key to retrieve.</param>
            <returns>A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> object associated with the decryption key.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The encryptedData parameter has an <see cref="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod" /> property that is null.-or-The encrypted key cannot be retrieved using the specified parameters.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.DecryptEncryptedKey(ADSD.EncryptedKey)">
            <summary>Determines the key represented by the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> element.</summary>
            <param name="encryptedKey">The <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object that contains the key to retrieve.</param>
            <returns>A byte array that contains the key.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedKey" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="encryptedKey" /> parameter is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
        </member>
        <member name="M:ADSD.EncryptedXml.AddKeyNameMapping(System.String,System.Object)">
            <summary>Defines a mapping between a key name and a symmetric key or an asymmetric key.</summary>
            <param name="keyName">The name to map to <paramref name="keyObject" />.</param>
            <param name="keyObject">The symmetric key to map to <paramref name="keyName" />.</param>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyName" /> parameter is <see langword="null" />.-or-The value of the <paramref name="keyObject" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="keyObject" /> parameter is not an RSA algorithm or a symmetric key. </exception>
        </member>
        <member name="M:ADSD.EncryptedXml.ClearKeyNameMappings">
            <summary>Resets all key name mapping.</summary>
        </member>
        <member name="M:ADSD.EncryptedXml.Encrypt(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Encrypts the outer XML of an element using the specified X.509 certificate.</summary>
            <param name="inputElement">The XML element to encrypt.</param>
            <param name="certificate">The X.509 certificate to use for encryption.</param>
            <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> element that represents the encrypted XML data.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is <see langword="null" />.-or-The value of the <paramref name="certificate" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">The value of the <paramref name="certificate" /> parameter does not represent an RSA key algorithm.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.Encrypt(System.Xml.XmlElement,System.String)">
            <summary>Encrypts the outer XML of an element using the specified key in the key mapping table.</summary>
            <param name="inputElement">The XML element to encrypt.</param>
            <param name="keyName">A key name that can be found in the key mapping table.</param>
            <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object that represents the encrypted XML data.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is <see langword="null" />.-or-The value of the <paramref name="keyName" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="keyName" /> parameter does not match a registered key name pair.-or-The cryptographic key described by the <paramref name="keyName" /> parameter is not supported. </exception>
        </member>
        <member name="M:ADSD.EncryptedXml.DecryptDocument">
            <summary>Decrypts all <see langword="&lt;EncryptedData&gt;" /> elements of the XML document that were specified during initialization of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class.</summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic key used to decrypt the document was not found. </exception>
        </member>
        <member name="M:ADSD.EncryptedXml.EncryptData(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Encrypts data in the specified byte array using the specified symmetric algorithm.</summary>
            <param name="plaintext">The data to encrypt.</param>
            <param name="symmetricAlgorithm">The symmetric algorithm to use for encryption.</param>
            <returns>A byte array of encrypted data.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="plaintext" /> parameter is <see langword="null" />.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be encrypted using the specified parameters.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.EncryptData(System.Xml.XmlElement,System.Security.Cryptography.SymmetricAlgorithm,System.Boolean)">
            <summary>Encrypts the specified element or its contents using the specified symmetric algorithm.</summary>
            <param name="inputElement">The element or its contents to encrypt.</param>
            <param name="symmetricAlgorithm">The symmetric algorithm to use for encryption.</param>
            <param name="content">
            <see langword="true" /> to encrypt only the contents of the element; <see langword="false" /> to encrypt the entire element.</param>
            <returns>A byte array that contains the encrypted data.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is <see langword="null" />.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.DecryptData(ADSD.EncryptedData,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Decrypts an <see langword="&lt;EncryptedData&gt;" /> element using the specified symmetric algorithm.</summary>
            <param name="encryptedData">The data to decrypt.</param>
            <param name="symmetricAlgorithm">The symmetric key used to decrypt <paramref name="encryptedData" />.</param>
            <returns>A byte array that contains the raw decrypted plain text.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" /> parameter is <see langword="null" />.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.ReplaceData(System.Xml.XmlElement,System.Byte[])">
            <summary>Replaces an <see langword="&lt;EncryptedData&gt;" /> element with a specified decrypted sequence of bytes.</summary>
            <param name="inputElement">The <see langword="&lt;EncryptedData&gt;" /> element to replace.</param>
            <param name="decryptedData">The decrypted data to replace <paramref name="inputElement" /> with.</param>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is <see langword="null" />.-or-The value of the <paramref name="decryptedData" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.ReplaceElement(System.Xml.XmlElement,ADSD.EncryptedData,System.Boolean)">
            <summary>Replaces the specified element with the specified <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
            <param name="inputElement">The element to replace with an <see langword="&lt;EncryptedData&gt;" /> element.</param>
            <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object to replace the <paramref name="inputElement" /> parameter with.</param>
            <param name="content">
            <see langword="true" /> to replace only the contents of the element; <see langword="false" /> to replace the entire element.</param>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is <see langword="null" />.-or-The value of the <paramref name="encryptedData" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Encrypts a key using a symmetric algorithm that a recipient uses to decrypt an <see langword="&lt;EncryptedData&gt;" /> element.</summary>
            <param name="keyData">The key to encrypt.</param>
            <param name="symmetricAlgorithm">The symmetric key used to encrypt <paramref name="keyData" />.</param>
            <returns>A byte array that represents the encrypted value of the <paramref name="keyData" /> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is <see langword="null" />.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="symmetricAlgorithm" /> parameter is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
        </member>
        <member name="M:ADSD.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)">
            <summary>Encrypts the key that a recipient uses to decrypt an <see langword="&lt;EncryptedData&gt;" /> element.</summary>
            <param name="keyData">The key to encrypt.</param>
            <param name="rsa">The asymmetric key used to encrypt <paramref name="keyData" />.</param>
            <param name="useOAEP">A value that specifies whether to use Optimal Asymmetric Encryption Padding (OAEP).</param>
            <returns>A byte array that represents the encrypted value of the <paramref name="keyData" /> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is <see langword="null" />.-or-The value of the <paramref name="rsa" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Decrypts an <see langword="&lt;EncryptedKey&gt;" /> element using a symmetric algorithm.</summary>
            <param name="keyData">An array of bytes that represents an encrypted <see langword="&lt;EncryptedKey&gt;" /> element.</param>
            <param name="symmetricAlgorithm">The symmetric key used to decrypt <paramref name="keyData" />.</param>
            <returns>A byte array that contains the plain text key.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is <see langword="null" />.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="symmetricAlgorithm" /> element is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
        </member>
        <member name="M:ADSD.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)">
            <summary>Decrypts an <see langword="&lt;EncryptedKey&gt;" /> element using an asymmetric algorithm.</summary>
            <param name="keyData">An array of bytes that represents an encrypted <see langword="&lt;EncryptedKey&gt;" /> element.</param>
            <param name="rsa">The asymmetric key used to decrypt <paramref name="keyData" />.</param>
            <param name="useOAEP">A value that specifies whether to use Optimal Asymmetric Encryption Padding (OAEP).</param>
            <returns>A byte array that contains the plain text key.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is <see langword="null" />.-or-The value of the <paramref name="rsa" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.EncryptingCredentials">
            <summary>Represents the cryptographic key and encrypting algorithm that are used to encrypt the proof key. </summary>
        </member>
        <member name="M:ADSD.EncryptingCredentials.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> class.</summary>
        </member>
        <member name="M:ADSD.EncryptingCredentials.#ctor(ADSD.SecurityKey,ADSD.SecurityKeyIdentifier,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> class with the specified cryptographic key, key identifier, and encryption algorithm.</summary>
            <param name="key">A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used for encryption.</param>
            <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that specifies the identifier that represents the key that is used for encryption.</param>
            <param name="algorithm">A URI that represents the cryptographic algorithm that is used for encryption.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is <see langword="null" />.-or-
            <paramref name="keyIdentifier" /> is <see langword="null" />.-or-
            <paramref name="algorithm" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.EncryptingCredentials.Algorithm">
            <summary>Gets or sets the encryption algorithm.</summary>
            <returns>A URI that represents the cryptographic algorithm that is used to encrypt the proof key.</returns>
            <exception cref="T:System.ArgumentException">An attempt is made to set the property to <see langword="null" /> or to an empty string.</exception>
        </member>
        <member name="P:ADSD.EncryptingCredentials.SecurityKey">
            <summary>Gets or sets the encryption key material.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to encrypt the proof key.</returns>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the property to <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.EncryptingCredentials.SecurityKeyIdentifier">
            <summary>Gets or sets the identifier that identifies the encrypting credential.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that identifies the key that is used to encrypt the proof key.</returns>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the property to <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.EncryptionMethod">
            <summary>
            EncryptionMethod
            </summary>
        </member>
        <member name="M:ADSD.EncryptionMethod.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class. </summary>
        </member>
        <member name="M:ADSD.EncryptionMethod.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class specifying an algorithm Uniform Resource Identifier (URI). </summary>
            <param name="algorithm">The Uniform Resource Identifier (URI) that describes the algorithm represented by an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class. </param>
        </member>
        <member name="P:ADSD.EncryptionMethod.KeySize">
            <summary>Gets or sets the algorithm key size used for XML encryption. </summary>
            <returns>The algorithm key size, in bits, used for XML encryption.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Security.Cryptography.Xml.EncryptionMethod.KeySize" /> property was set to a value that was less than 0.</exception>
        </member>
        <member name="P:ADSD.EncryptionMethod.KeyAlgorithm">
            <summary>Gets or sets a Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption. </summary>
            <returns>A Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption.</returns>
        </member>
        <member name="M:ADSD.EncryptionMethod.GetXml">
            <summary>Returns an <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class.</summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class.</returns>
        </member>
        <member name="M:ADSD.EncryptionMethod.LoadXml(System.Xml.XmlElement)">
            <summary>Parses the specified <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> object to match.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> object to parse.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The key size expressed in the <paramref name="value" /> parameter was less than 0. </exception>
        </member>
        <member name="T:ADSD.EncryptionProperty">
            <summary>Represents the <see langword="&lt;EncryptionProperty&gt;" /> element used in XML encryption. This class cannot be inherited.</summary>
        </member>
        <member name="M:ADSD.EncryptionProperty.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class. </summary>
        </member>
        <member name="M:ADSD.EncryptionProperty.#ctor(System.Xml.XmlElement)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class using an <see cref="T:System.Xml.XmlElement" /> object. </summary>
            <param name="elementProperty">An <see cref="T:System.Xml.XmlElement" /> object to use for initialization.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="elementProperty" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" /> property of the <paramref name="elementProperty" /> parameter is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property of the <paramref name="elementProperty" /> parameter is not "http://www.w3.org/2001/04/xmlenc#".</exception>
        </member>
        <member name="P:ADSD.EncryptionProperty.Id">
            <summary>Gets the ID of the current <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</summary>
            <returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptionProperty.Target">
            <summary>Gets the target of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</summary>
            <returns>The target of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptionProperty.PropertyElement">
            <summary>Gets or sets an <see cref="T:System.Xml.XmlElement" /> object that represents an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object. </summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> object that represents an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" /> property was set to <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" /> property of the value set to the <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" /> property is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property of the value set to the <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" /> property is not "http://www.w3.org/2001/04/xmlenc#".</exception>
        </member>
        <member name="M:ADSD.EncryptionProperty.GetXml">
            <summary>Returns an <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class.</summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class.</returns>
        </member>
        <member name="M:ADSD.EncryptionProperty.LoadXml(System.Xml.XmlElement)">
            <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to match.</summary>
            <param name="value">An <see cref="T:System.Xml.XmlElement" /> object to parse.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" /> property of the <paramref name="value" /> parameter is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property of the <paramref name="value" /> parameter is not "http://www.w3.org/2001/04/xmlenc#".</exception>
        </member>
        <member name="T:ADSD.EncryptionPropertyCollection">
            <summary>Represents a collection of <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> classes used in XML encryption. This class cannot be inherited.</summary>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> class.</summary>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through an <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through an <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptionPropertyCollection.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.Add(ADSD.EncryptionProperty)">
            <summary>Adds an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
            <param name="value">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to add to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
            <returns>The position at which the new element is inserted.</returns>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.Clear">
            <summary>Removes all items from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.Contains(ADSD.EncryptionProperty)">
            <summary>Determines whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object contains a specific <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</summary>
            <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to locate in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object. </param>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object is found in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.IndexOf(ADSD.EncryptionProperty)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
            <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to locate in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
            <returns>The index of <paramref name="value" /> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.Insert(System.Int32,ADSD.EncryptionProperty)">
            <summary>Inserts an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object into the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object at the specified position.</summary>
            <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
            <param name="value">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to insert into the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.Remove(ADSD.EncryptionProperty)">
            <summary>Removes the first occurrence of a specific <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
            <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to remove from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</summary>
            <param name="index">The zero-based index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to remove.</param>
        </member>
        <member name="P:ADSD.EncryptionPropertyCollection.IsFixedSize">
            <summary>Gets a value that indicates whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object has a fixed size.</summary>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object has a fixed size; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:ADSD.EncryptionPropertyCollection.IsReadOnly">
            <summary>Gets a value that indicates whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is read-only.</summary>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is read-only; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.Item(System.Int32)">
            <summary>Returns the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</summary>
            <param name="index">The index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to return.</param>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</returns>
        </member>
        <member name="P:ADSD.EncryptionPropertyCollection.ItemOf(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</summary>
            <param name="index">The index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to return.</param>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</returns>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object to an array, starting at a particular array index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
        </member>
        <member name="M:ADSD.EncryptionPropertyCollection.CopyTo(ADSD.EncryptionProperty[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object to an array of <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> objects, starting at a particular array index.</summary>
            <param name="array">The one-dimensional array of  <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> objects that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:ADSD.EncryptionPropertyCollection.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
        </member>
        <member name="P:ADSD.EncryptionPropertyCollection.IsSynchronized">
            <summary>Gets a value that indicates whether access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is synchronized (thread safe).</summary>
            <returns>
            <see langword="true" /> if access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:ADSD.EpochTime">
            <summary>
            Returns the absolute DateTime or the Seconds since Unix Epoch, where Epoch is UTC 1970-01-01T0:0:0Z.
            </summary>
        </member>
        <member name="F:ADSD.EpochTime.UnixEpoch">
            <summary>DateTime as UTV for UnixEpoch</summary>
        </member>
        <member name="M:ADSD.EpochTime.GetIntDate(System.DateTime)">
            <summary>
            Per JWT spec:
            Gets the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the desired date/time.
            </summary>
            <param name="datetime">The DateTime to convert to seconds.</param>
            <remarks>if dateTimeUtc less than UnixEpoch, return 0</remarks>
            <returns>the number of seconds since Unix Epoch.</returns>
        </member>
        <member name="M:ADSD.EpochTime.DateTime(System.Int64)">
            <summary>Creates a DateTime from epoch time.</summary>
            <param name="secondsSinceUnixEpoch">Number of seconds.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="T:ADSD.Evidence">
            <summary>
            Policy evidence
            </summary>
        </member>
        <member name="M:ADSD.Evidence.#ctor">
            <summary>Initializes a new empty instance of the <see cref="T:System.Security.Policy.Evidence" /> class.</summary>
        </member>
        <member name="M:ADSD.Evidence.#ctor(ADSD.Evidence)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from a shallow copy of an existing one.</summary>
            <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> instance from which to create the new instance. This instance is not deep-copied. </param>
            <exception cref="T:System.ArgumentException">The <paramref name="evidence" /> parameter is not a valid instance of <see cref="T:System.Security.Policy.Evidence" />. </exception>
        </member>
        <member name="M:ADSD.Evidence.#ctor(System.Object[],System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from multiple sets of host and assembly evidence.</summary>
            <param name="hostEvidence">The host evidence from which to create the new instance. </param>
            <param name="assemblyEvidence">The assembly evidence from which to create the new instance. </param>
        </member>
        <member name="M:ADSD.Evidence.#ctor(ADSD.EvidenceBase[],ADSD.EvidenceBase[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from multiple sets of host and assembly evidence. </summary>
            <param name="hostEvidence">The host evidence from which to create the new instance. </param>
            <param name="assemblyEvidence">The assembly evidence from which to create the new instance. </param>
        </member>
        <member name="M:ADSD.Evidence.AddHost(System.Object)">
            <summary>Adds the specified evidence supplied by the host to the evidence set.</summary>
            <param name="id">Any evidence object. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id" /> is not serializable.</exception>
        </member>
        <member name="M:ADSD.Evidence.AddAssembly(System.Object)">
            <summary>Adds the specified assembly evidence to the evidence set.</summary>
            <param name="id">Any evidence object. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id" /> is not serializable.</exception>
        </member>
        <member name="M:ADSD.Evidence.AddAssemblyEvidence``1(``0)">
            <summary>Adds an evidence object of the specified type to the assembly-supplied evidence list. </summary>
            <param name="evidence">The assembly evidence to add.</param>
            <typeparam name="T">The type of the object in <paramref name="evidence" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="evidence" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="evidence" /> is not serializable.</exception>
        </member>
        <member name="M:ADSD.Evidence.AddHostEvidence``1(``0)">
            <summary>Adds host evidence of the specified type to the host evidence collection.</summary>
            <param name="evidence">The host evidence to add.</param>
            <typeparam name="T">The type of the object in <paramref name="evidence" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="evidence" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.Evidence.Locked">
            <summary>Gets or sets a value indicating whether the evidence is locked.</summary>
            <returns>
            <see langword="true" /> if the evidence is locked; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.Evidence.Merge(ADSD.Evidence)">
            <summary>Merges the specified evidence set into the current evidence set.</summary>
            <param name="evidence">The evidence set to be merged into the current evidence set. </param>
            <exception cref="T:System.ArgumentException">The <paramref name="evidence" /> parameter is not a valid instance of <see cref="T:System.Security.Policy.Evidence" />. </exception>
            <exception cref="T:System.Security.SecurityException">
            <see cref="P:System.Security.Policy.Evidence.Locked" /> is <see langword="true" />, the code that calls this method does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, and the <paramref name="evidence" /> parameter has a host list that is not empty. </exception>
        </member>
        <member name="M:ADSD.Evidence.CopyTo(System.Array,System.Int32)">
            <summary>Copies evidence objects to an <see cref="T:System.Array" />.</summary>
        </member>
        <member name="M:ADSD.Evidence.GetHostEnumerator">
            <summary>Enumerates evidence supplied by the host.</summary>
            <returns>An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method.</returns>
        </member>
        <member name="M:ADSD.Evidence.GetAssemblyEnumerator">
            <summary>Enumerates evidence provided by the assembly.</summary>
            <returns>An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> method.</returns>
        </member>
        <member name="M:ADSD.Evidence.GetEnumerator">
            <summary>Enumerates all evidence in the set, both that provided by the host and that provided by the assembly.</summary>
            <returns>An enumerator for evidence added by both the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method and the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> method.</returns>
        </member>
        <member name="M:ADSD.Evidence.GetAssemblyEvidence``1">
            <summary>Gets assembly evidence of the specified type from the collection.</summary>
            <typeparam name="T">The type of the evidence to get.</typeparam>
        </member>
        <member name="M:ADSD.Evidence.GetHostEvidence``1">
            <summary>Gets host evidence of the specified type from the collection.</summary>
            <typeparam name="T">The type of the evidence to get.</typeparam>
        </member>
        <member name="P:ADSD.Evidence.Count">
            <summary>Gets the number of evidence objects in the evidence set.</summary>
            <returns>The number of evidence objects in the evidence set.</returns>
        </member>
        <member name="P:ADSD.Evidence.SyncRoot">
            <summary>Gets the synchronization root.</summary>
            <returns>Always <see langword="this" /> (<see langword="Me" /> in Visual Basic), because synchronization of evidence sets is not supported.</returns>
        </member>
        <member name="P:ADSD.Evidence.IsSynchronized">
            <summary>Gets a value indicating whether the evidence set is thread-safe.</summary>
            <returns>Always <see langword="false" /> because thread-safe evidence sets are not supported.</returns>
        </member>
        <member name="P:ADSD.Evidence.IsReadOnly">
            <summary>Gets a value indicating whether the evidence set is read-only.</summary>
            <returns>Always <see langword="false" />, because read-only evidence sets are not supported.</returns>
        </member>
        <member name="M:ADSD.Evidence.Clone">
            <summary>Returns a duplicate copy of this evidence object.</summary>
            <returns>A duplicate copy of this evidence object.</returns>
        </member>
        <member name="M:ADSD.Evidence.Clear">
            <summary>Removes the host and assembly evidence from the evidence set.</summary>
        </member>
        <member name="M:ADSD.Evidence.RemoveType(System.Type)">
            <summary>Removes the evidence for a given type from the host and assembly enumerations.</summary>
            <param name="t">The type of the evidence to be removed. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t" /> is null.</exception>
        </member>
        <member name="T:ADSD.EvidenceBase">
            <summary>
            EvidenceBase
            </summary>
        </member>
        <member name="M:ADSD.EvidenceBase.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.EvidenceBase" /> class. </summary>
            <exception cref="T:System.InvalidOperationException">An object to be used as evidence is not serializable.</exception>
        </member>
        <member name="M:ADSD.EvidenceBase.Clone">
            <summary>Creates a new object that is a complete copy of the current instance.</summary>
            <returns>A duplicate copy of this evidence object.</returns>
        </member>
        <member name="T:ADSD.Exml">
            <summary>
            A massive dump-bag of XML helpers
            </summary>
        </member>
        <member name="T:ADSD.GlobalSettings">
            <summary>
            Settings to change internal behaviour
            </summary>
        </member>
        <member name="P:ADSD.GlobalSettings.SkipSignatureAttributeChecks">
            <summary>
            Default: false.
            Should XML signature attribute checks be skipped? If false, they are enforced
            </summary>
        </member>
        <member name="P:ADSD.GlobalSettings.AllowDetachedSignature">
            <summary>
            Default: false.
            If true, Signature URLs don't need to resolve to an FQDN
            </summary>
        </member>
        <member name="P:ADSD.GlobalSettings.UseInsecureHashAlgorithmsForXml">
            <summary>
            Default: false
            If true, use SHA1 hash for XML. This should only be used for legacy systems that can't be updated.
            </summary>
        </member>
        <member name="P:ADSD.GlobalSettings.UseLegacyCertificatePrivateKey">
            <summary>
            Default: false
            If true, allow older certificate forms. This should only be used for legacy systems that can't be updated.
            </summary>
        </member>
        <member name="P:ADSD.GlobalSettings.DisableUpdatingRsaProviderType">
            <summary>
            Default: false
            If true, disable updates/upgrades inside the RSA resolution process.
            </summary>
        </member>
        <member name="T:ADSD.IEvidenceFactory">
            <summary>Gets an object's <see cref="T:System.Security.Policy.Evidence" />.</summary>
        </member>
        <member name="P:ADSD.IEvidenceFactory.Evidence">
            <summary>Gets <see cref="T:System.Security.Policy.Evidence" /> that verifies the current object's identity.</summary>
            <returns>
            <see cref="T:System.Security.Policy.Evidence" /> of the current object's identity.</returns>
        </member>
        <member name="T:ADSD.InMemorySymmetricSecurityKey">
            <summary>Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.</summary>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> class using the specified symmetric key. </summary>
            <param name="symmetricKey">An array of <see cref="T:System.Byte" /> that contains the symmetric key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="symmetricKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="symmetricKey" /> is zero length.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> class using the specified symmetric key and a value that indicates whether the binary data must be cloned. </summary>
            <param name="symmetricKey">An array of <see cref="T:System.Byte" /> that contains the symmetric key.</param>
            <param name="cloneBuffer">
            <see langword="true" /> to clone the array passed into the <paramref name="symmetricKey" /> parameter; otherwise, <see langword="false" />. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="symmetricKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="symmetricKey" /> is zero length.</exception>
        </member>
        <member name="P:ADSD.InMemorySymmetricSecurityKey.KeySize">
            <summary>Gets the size, in bits, of the key.</summary>
            <returns>The size, in bits, of the key.</returns>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
            <summary>Decrypts the specified encrypted key.</summary>
            <param name="algorithm">The cryptographic algorithm that was used to encrypt the key.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
            <summary>Encrypts the specified key.</summary>
            <param name="algorithm">The cryptographic algorithm to encrypt the key with.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>Generates a derived key using the specified cryptographic algorithm and parameters for the current key.</summary>
            <param name="algorithm">A URI that represents the cryptographic algorithm to use to generate the derived key.</param>
            <param name="label">An array of <see cref="T:System.Byte" /> that contains the label parameter for the cryptographic algorithm.</param>
            <param name="nonce">An array of <see cref="T:System.Byte" /> that contains the nonce that is used to create a derived key.</param>
            <param name="derivedKeyLength">The size of the derived key.</param>
            <param name="offset">The position at which the derived key is located in the byte array that is returned from this method.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the derived key.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
            <summary>Gets a transform that decrypts cipher text using the specified cryptographic algorithm.</summary>
            <param name="algorithm">A cryptographic algorithm that decrypts cipher text, such as encrypted XML.</param>
            <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (<see langword="IV" />) for the specified algorithm.</param>
            <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the decryption transform.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
            <summary>Gets a transform that encrypts XML using the specified cryptographic algorithm.</summary>
            <param name="algorithm">A cryptographic algorithm that encrypts XML.</param>
            <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (<see langword="IV" />) for the specified algorithm.</param>
            <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the encryption transform.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.GetIVSize(System.String)">
            <summary>Gets the size, in bits, of the initialization vector (<see langword="IV" />) that is required for the specified cryptographic algorithm.</summary>
            <param name="algorithm">The cryptographic algorithm to get the size of the initialization vector (<see langword="IV" />).</param>
            <returns>The size, in bits, of the initialization vector (<see langword="IV" />) that is required for the cryptographic algorithm specified in the <paramref name="algorithm" /> parameter.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
            <summary>Gets an instance of the specified keyed hash algorithm.</summary>
            <param name="algorithm">The keyed hash algorithm to get an instance of.</param>
            <returns>A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> that represents the keyed hash algorithm.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />.</exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
            <summary>Gets an instance of the specified symmetric algorithm.</summary>
            <param name="algorithm">The symmetric algorithm to get an instance of.</param>
            <returns>A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> that represents the symmetric algorithm.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />,  <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" /></exception>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.GetSymmetricKey">
            <summary>Gets the bytes that represent the symmetric key.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the symmetric key.</returns>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm uses asymmetric keys.</summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm uses asymmetric keys; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm is supported by this class. </summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is supported by this class; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm uses symmetric keys; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:ADSD.ISecurityCheck">
            <summary>
            Protocol for validating a security token
            </summary>
        </member>
        <member name="M:ADSD.ISecurityCheck.Validate(System.String)">
            <summary>
            Validate a raw token.
            This could be from a cookie or an Authorization header
            </summary>
            <param name="token">JWT token string</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:ADSD.IssuerNameRegistry">
            <summary>The abstract base class for an issuer name registry. An issuer name registry is used to associate a mnemonic name to the cryptographic material that is needed to verify the signatures of tokens produced by the corresponding issuer. The issuer name registry maintains a list of issuers that are trusted by a relying party (RP) application.</summary>
        </member>
        <member name="M:ADSD.IssuerNameRegistry.GetIssuerName(ADSD.SecurityToken)">
            <summary>When overridden in a derived class, returns the name of the issuer of the specified security token.</summary>
            <param name="securityToken">The security token for which to return the issuer name.</param>
            <returns>The issuer name.</returns>
        </member>
        <member name="M:ADSD.IssuerNameRegistry.GetIssuerName(ADSD.SecurityToken,System.String)">
            <summary>When overridden in a derived class, returns the name of the issuer of the specified security token. The specified issuer name may be considered in determining the issuer name to return.</summary>
            <param name="securityToken">The security token for which to return the issuer name.</param>
            <param name="requestedIssuerName">An issuer name to consider in the request.</param>
            <returns>The issuer name.</returns>
        </member>
        <member name="M:ADSD.IssuerNameRegistry.GetWindowsIssuerName">
            <summary>Returns the default issuer name to be used for Windows claims.</summary>
            <returns>The default issuer name for Windows claims.</returns>
        </member>
        <member name="T:ADSD.ITokenReplayCache">
            <summary>
            Interface that defines a simple cache for tacking replaying of security tokens.
            </summary>
        </member>
        <member name="M:ADSD.ITokenReplayCache.TryAdd(System.String,System.DateTime)">
            <summary>Try to add a securityToken.</summary>
            <param name="securityToken">the security token to add.</param>
            <param name="expiresOn">the time when security token expires.</param>
            <returns>true if the security token was successfully added.</returns>
        </member>
        <member name="M:ADSD.ITokenReplayCache.TryFind(System.String)">
            <summary>Try to find securityToken</summary>
            <param name="securityToken">the security token to find.</param>
            <returns>true if the security token is found.</returns>
        </member>
        <member name="T:ADSD.JsonExtensions">
            <summary>Dictionary extensions for serializations</summary>
        </member>
        <member name="M:ADSD.JsonExtensions.SerializeToJson(System.Object)">
            <summary>Serializes an object to JSON.</summary>
            <param name="value">The object to serialize</param>
            <returns>the object as JSON.</returns>
        </member>
        <member name="M:ADSD.JsonExtensions.DeserializeFromJson``1(System.String)">
            <summary>Deserialzes JSON into an instance of type T.</summary>
            <typeparam name="T">the object type.</typeparam>
            <param name="jsonString">the JSON to deserialze.</param>
            <returns>a new instance of type T.</returns>
        </member>
        <member name="M:ADSD.JsonExtensions.DeserializeJwtHeader(System.String)">
            <summary>
            Deserialzes JSON into an instance of <see cref="T:System.IdentityModel.Tokens.JwtHeader" />.
            </summary>
            <param name="jsonString">the JSON to deserialze.</param>
            <returns>a new instance <see cref="T:System.IdentityModel.Tokens.JwtHeader" />.</returns>
        </member>
        <member name="M:ADSD.JsonExtensions.DeserializeJwtPayload(System.String)">
            <summary>
            Deserialzes JSON into an instance of <see cref="T:System.IdentityModel.Tokens.JwtPayload" />.
            </summary>
            <param name="jsonString">the JSON to deserialze.</param>
            <returns>a new instance <see cref="T:System.IdentityModel.Tokens.JwtPayload" />.</returns>
        </member>
        <member name="T:ADSD.JwtHeader">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> which contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT.
            The member names within the JWT Header are referred to as Header Parameter Names.
            <para>These names MUST be unique and the values must be <see cref="T:System.String" />(s). The corresponding values are referred to as Header Parameter Values.</para>
            </summary>
        </member>
        <member name="M:ADSD.JwtHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> class. Default string comparer <see cref="P:System.StringComparer.Ordinal" />.
            </summary>
        </member>
        <member name="M:ADSD.JwtHeader.#ctor(ADSD.SigningCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> class. With the Header Parameters as follows:
            <para>{ { typ, JWT }, { alg, Mapped( <see cref="P:System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm" /> } }
            See: Algorithm Mapping below.</para>
            </summary>
            <param name="signingCredentials">The <see cref="P:System.IdentityModel.Tokens.JwtHeader.SigningCredentials" /> that will be or were used to sign the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.</param>
            <remarks>
            <para>For each <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> in signingCredentials.SigningKeyIdentifier</para>
            <para>if the clause  is a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause" /> Header Parameter { clause.Name, clause.Id } will be added.</para>
            <para>For example, if clause.Name == 'kid' and clause.Id == 'SecretKey99'. The JSON object { kid, SecretKey99 } would be added.</para>
            <para>In addition, if the <see cref="P:System.IdentityModel.Tokens.JwtHeader.SigningCredentials" /> is a <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> the JSON object { x5t, Base64UrlEncoded( <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString" /> } will be added.</para>
            <para>This simplifies the common case where a X509Certificate is used.</para>
            <para>================= </para>
            <para>Algorithm Mapping</para>
            <para>================= </para>
            <para><see cref="P:System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm" /> describes the algorithm that is discoverable by the CLR runtime.</para>
            <para>The  { alg, 'value' } placed in the header reflects the JWT specification.</para>
            <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundAlgorithmMap" /> contains a signature mapping where the 'value' above will be translated according to this mapping.
            <para>Current mapping is:</para>
            <para>    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256' =&gt; 'RS256'</para>
            <para>    'http://www.w3.org/2001/04/xmldsig-more#hmac-sha256' =&gt; 'HS256'</para>
            </remarks>
        </member>
        <member name="P:ADSD.JwtHeader.Alg">
            <summary>
            Gets the signature algorithm that was used to create the signature.
            </summary>
            <remarks>If the signature algorithm is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtHeader.SigningCredentials">
            <summary>
            Gets the <see cref="P:System.IdentityModel.Tokens.JwtHeader.SigningCredentials" /> passed in the constructor.
            </summary>
            <remarks>This value may be null.</remarks>
        </member>
        <member name="P:ADSD.JwtHeader.Typ">
            <summary>Gets the mime type (Typ) of the token.</summary>
            <remarks>If the mime type is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtHeader.SigningKeyIdentifier">
            <summary>
            Gets a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that contains a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> for each key found.
            </summary>
            <remarks>
            Keys are identified by matching a 'Reserved Header Parameter Name' found in the in JSON Web Signature specification.
            <para>Names recognized are: jku, jkw, kid, x5c, x5t, x5u</para>
            <para>'x5t' adds a <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> passing a the Base64UrlDecoded( Value ) to the constructor.</para>
            <para>'jku', 'jkw', 'kid', 'x5u', 'x5c' each add a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause" /> with the { Name, Value } passed to the <see cref="M:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause.#ctor(System.String,System.String)" />.</para>
            <para>   </para>
            <para>If no keys are found, an empty <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> will be returned.</para>
            </remarks>
        </member>
        <member name="M:ADSD.JwtHeader.SerializeToJson">
            <summary>Serializes this instance to JSON.</summary>
            <returns>this instance as JSON.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Serializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="M:ADSD.JwtHeader.Base64UrlEncode">
            <summary>Encodes this instance as Base64UrlEncoded JSON.</summary>
            <returns>Base64UrlEncoded JSON.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Serializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="M:ADSD.JwtHeader.Base64UrlDeserialize(System.String)">
            <summary>
            Deserializes Base64UrlEncoded JSON into a <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> instance.
            </summary>
            <param name="base64UrlEncodedJsonString">base64url encoded JSON to deserialize.</param>
            <returns>an instance of <see cref="T:System.IdentityModel.Tokens.JwtHeader" />.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Deserializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="M:ADSD.JwtHeader.Deserialize(System.String)">
            <summary>
            Deserialzes JSON into a <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> instance.
            </summary>
            <param name="jsonString"> the JSON to deserialize.</param>
            <returns>an instance of <see cref="T:System.IdentityModel.Tokens.JwtHeader" />.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Deserializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="T:ADSD.JwtPayload">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> which contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }.
            </summary>
        </member>
        <member name="M:ADSD.JwtPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> class with no claims. Default string comparer <see cref="P:System.StringComparer.Ordinal" />.
            Creates a empty <see cref="T:System.IdentityModel.Tokens.JwtPayload" />
            </summary>
        </member>
        <member name="M:ADSD.JwtPayload.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> class with <see cref="T:System.Collections.Generic.IEnumerable`1" />. Default string comparer <see cref="P:System.StringComparer.Ordinal" />.
            <param name="claims">the claims to add.</param>
            </summary>
        </member>
        <member name="M:ADSD.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> class with claims added for each parameter specified. Default string comparer <see cref="P:System.StringComparer.Ordinal" />.
            </summary>
            <param name="issuer">if this value is not null, a { iss, 'issuer' } claim will be added.</param>
            <param name="audience">if this value is not null, a { aud, 'audience' } claim will be added</param>
            <param name="claims">if this value is not null then for each <see cref="T:System.Security.Claims.Claim" /> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <param name="notBefore">if notbefore.HasValue is 'true' a { nbf, 'value' } claim is added.</param>
            <param name="expires">if expires.HasValue is 'true' a { exp, 'value' } claim is added.</param>
            <remarks>Comparison is set to <see cref="P:System.StringComparer.Ordinal" />
            <para>The 4 parameters: 'issuer', 'audience', 'notBefore', 'expires' take precednece over <see cref="T:System.Security.Claims.Claim" />(s) in 'claims'. The values in 'claims' will be overridden.</para></remarks>
            <exception cref="T:System.ArgumentException">if 'expires' &lt;= 'notbefore'.</exception>
        </member>
        <member name="P:ADSD.JwtPayload.Actort">
            <summary>
            Gets the 'value' of the 'actor' claim { actort, 'value' }.
            </summary>
            <remarks>If the 'actor' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Acr">
            <summary>Gets the 'value' of the 'acr' claim { acr, 'value' }.</summary>
            <remarks>If the 'acr' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Amr">
            <summary>Gets the 'value' of the 'amr' claim { amr, 'value' }.</summary>
            <remarks>If the 'amr' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.AuthTime">
            <summary>
            Gets the 'value' of the 'auth_time' claim { auth_time, 'value' }.
            </summary>
            <remarks>If the 'auth_time' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Aud">
            <summary>
            Gets the 'value' of the 'audience' claim { aud, 'value' } as a list of strings.
            </summary>
            <remarks>If the 'audience' claim is not found, an empty enumerable is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Azp">
            <summary>Gets the 'value' of the 'azp' claim { azp, 'value' }.</summary>
            <remarks>If the 'azp' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.CHash">
            <summary>
            Gets 'value' of the 'c_hash' claim { c_hash, 'value' }.
            </summary>
            <remarks>If the 'c_hash' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Exp">
            <summary>
            Gets the 'value' of the 'expiration' claim { exp, 'value' }.
            </summary>
            <remarks>If the 'expiration' claim is not found OR could not be converted to <see cref="T:System.Int32" />, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Jti">
            <summary>
            Gets the 'value' of the 'JWT ID' claim { jti, 'value' }.
            </summary>
            <remarks>If the 'JWT ID' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Iat">
            <summary>
            Gets the 'value' of the 'Issued At' claim { iat, 'value' }.
            </summary>
            <remarks>If the 'Issued At' claim is not found OR cannot be converted to <see cref="T:System.Int32" /> null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Iss">
            <summary>Gets 'value' of the 'issuer' claim { iss, 'value' }.</summary>
            <remarks>If the 'issuer' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Nbf">
            <summary>
            Gets the 'value' of the 'expiration' claim { nbf, 'value' }.
            </summary>
            <remarks>If the 'notbefore' claim is not found OR could not be converted to <see cref="T:System.Int32" />, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Nonce">
            <summary>Gets 'value' of the 'nonce' claim { nonce, 'value' }.</summary>
            <remarks>If the 'nonce' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Sub">
            <summary>Gets "value" of the 'subject' claim { sub, 'value' }.</summary>
            <remarks>If the 'subject' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.ValidFrom">
            <summary>
            Gets 'value' of the 'notbefore' claim { nbf, 'value' } converted to a <see cref="T:System.DateTime" /> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'notbefore' claim is not found, then <see cref="F:System.DateTime.MinValue" /> is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.ValidTo">
            <summary>
            Gets 'value' of the 'expiration' claim { exp, 'value' } converted to a <see cref="T:System.DateTime" /> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue" /> is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtPayload.Claims">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1" /><see cref="T:System.Security.Claims.Claim" /> for each JSON { name, value }.
            </summary>
            <remarks>Each <see cref="T:System.Security.Claims.Claim" />(s) returned will have the <see cref="P:System.Security.Claims.Claim.Type" /> translated according to the mapping found in <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap" />. Adding and removing to <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap" /> will affect the value of the <see cref="P:System.Security.Claims.Claim.Type" />.
            <para><see cref="P:System.Security.Claims.Claim.Issuer" /> and <see cref="P:System.Security.Claims.Claim.OriginalIssuer" /> will be set to the value of <see cref="P:System.IdentityModel.Tokens.JwtPayload.Iss" /> ( <see cref="F:System.String.Empty" /> if null).</para></remarks>
        </member>
        <member name="M:ADSD.JwtPayload.AddClaim(System.Security.Claims.Claim)">
            <summary>
            Adds a JSON object representing the <see cref="T:System.Security.Claims.Claim" /> to the <see cref="T:System.IdentityModel.Tokens.JwtPayload" />
            </summary>
            <param name="claim">{ 'Claim.Type', 'Claim.Value' } is added. If a JSON object is found with the name == <see cref="P:System.Security.Claims.Claim.Type" /> then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <remarks>See <see cref="M:System.IdentityModel.Tokens.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" /> for details on how <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> is applied.</remarks>
            <exception cref="T:System.ArgumentNullException">'claim' is null.</exception>
        </member>
        <member name="M:ADSD.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Adds a number of <see cref="T:System.Security.Claims.Claim" /> to the <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> as JSON { name, value } pairs.
            </summary>
            <param name="claims">for each <see cref="T:System.Security.Claims.Claim" /> a JSON pair { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <remarks><para>Each <see cref="T:System.Security.Claims.Claim" /> added will have <see cref="P:System.Security.Claims.Claim.Type" /> translated according to the mapping found in <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap" />. Adding and removing to <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap" />
            will affect the name component of the Json claim</para>
            <para>Any <see cref="T:System.Security.Claims.Claim" /> in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> that is null, will be ignored.</para></remarks>
            <exception cref="T:System.ArgumentNullException">'claims' is null.</exception>
        </member>
        <member name="M:ADSD.JwtPayload.GetDateTime(System.String)">
            <summary>
            Gets the DateTime using the number of seconds from 1970-01-01T0:0:0Z (UTC)
            </summary>
            <param name="key">Claim in the payload that should map to an integer.</param>
            <remarks>If the claim is not found, the function returns: DateTime.MinValue</remarks>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">if an overflow exception is thrown by the runtime.</exception>
            <returns>the DateTime representation of a claim.</returns>
        </member>
        <member name="M:ADSD.JwtPayload.SerializeToJson">
            <summary>Serializes this instance to JSON.</summary>
            <returns>this instance as JSON.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Serializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="M:ADSD.JwtPayload.Base64UrlEncode">
            <summary>Encodes this instance as Base64UrlEncoded JSON.</summary>
            <returns>Base64UrlEncoded JSON.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Serializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="M:ADSD.JwtPayload.Base64UrlDeserialize(System.String)">
            <summary>
            Deserializes Base64UrlEncoded JSON into a <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> instance.
            </summary>
            <param name="base64UrlEncodedJsonString">base64url encoded JSON to deserialize.</param>
            <returns>an instance of <see cref="T:System.IdentityModel.Tokens.JwtPayload" />.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Deserializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="M:ADSD.JwtPayload.Deserialize(System.String)">
            <summary>
            Deserialzes JSON into a <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> instance.
            </summary>
            <param name="jsonString">the JSON to deserialize.</param>
            <returns>an instance of <see cref="T:System.IdentityModel.Tokens.JwtPayload" />.</returns>
            <remarks>use <see cref="P:System.IdentityModel.Tokens.JsonExtensions.Deserializer" /> to customize JSON serialization.</remarks>
        </member>
        <member name="T:ADSD.JwtSecurityKey">
            <summary>
            An X509 key used in signing JWT tokens
            </summary>
        </member>
        <member name="M:ADSD.JwtSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" /> class using the specified X.509 certificate. </summary>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that represents the X.509 certificate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityKey.KeySize">
            <summary>
            Gets the size, in bits, of the public key associated with the X.509 certificate.
            If the public key is not valid, this will return zero.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityKey.PrivateKey">
            <summary>
            Private side of certificate provided
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityKey.PublicKey">
            <summary>
            Public side of certificate provided
            </summary>
        </member>
        <member name="M:ADSD.JwtSecurityKey.DecryptKey(System.String,System.Byte[])">
            <summary>Decrypts the specified encrypted key using the specified cryptographic algorithm.</summary>
            <param name="algorithm">The cryptographic algorithm to decrypt the key.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
            <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor does not have a private key.-or-The X.509 certificate has a private key, but it was not generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.-or-The X.509 certificate has a private key, it was generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm, but the <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm" /> property is <see langword="null" />.-or-The <paramref name="algorithm" /> parameter is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> and <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityKey.EncryptKey(System.String,System.Byte[])">
            <summary>Encrypts the specified encrypted key using the specified cryptographic algorithm.</summary>
            <param name="algorithm">The cryptographic algorithm to encrypt the key.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key to encrypt.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
            <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor has a public key that was not generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.-or-The <paramref name="algorithm" /> parameter is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> and <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
            <summary>Gets the specified asymmetric cryptographic algorithm.</summary>
            <param name="algorithm">The asymmetric algorithm to create.</param>
            <param name="privateKey">
            <see langword="true" /> when a private key is required to create the algorithm; otherwise, <see langword="false" />. </param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that represents the specified asymmetric cryptographic algorithm.</returns>
            <exception cref="T:System.NotSupportedException">
            <paramref name="privateKey" /> is <see langword="true" /> and the X.509 certificate specified in the constructor does not have a private key.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the public or private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />. -or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public or private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />. -or-
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityKey.GetHashAlgorithmForSignature(System.String)">
            <summary>Gets a cryptographic algorithm that generates a hash for a digital signature.</summary>
            <param name="algorithm">The hash algorithm.</param>
            <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> that generates hashes for digital signatures.</returns>
            <exception cref="T:System.NotSupportedException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityKey.GetSignatureDeformatter(System.String)">
            <summary>Gets the de-formatter algorithm for the digital signature.</summary>
            <param name="algorithm">The de-formatter algorithm for the digital signature to get an instance of.</param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the de-formatter algorithm for the digital signature.</returns>
            <exception cref="T:System.NotSupportedException">
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the public key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />.-or-
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />,
            <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityKey.GetSignatureFormatter(System.String)">
            <summary>Gets the formatter algorithm for the digital signature.</summary>
            <param name="algorithm">The formatter algorithm for the digital signature to get an instance of.</param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the formatter algorithm for the digital signature.</returns>
            <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor does not have a private key.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />.-or-
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />,
            <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityKey.HasPrivateKey">
            <summary>Gets a value that indicates whether the private key is a available. </summary>
            <returns>
            <see langword="true" /> when the private key is available; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.JwtSecurityKey.IsAsymmetricAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm uses asymmetric keys.</summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.JwtSecurityKey.IsSupportedAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm is supported by this class. </summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public key is of the right type; otherwise, <see langword="false" />. See the remarks for details.</returns>
        </member>
        <member name="M:ADSD.JwtSecurityKey.IsSymmetricAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:ADSD.JwtSecurityKey.Certificate">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
        </member>
        <member name="T:ADSD.JwtSecurityToken">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> designed for representing a JSON Web Token (JWT).
            </summary>
        </member>
        <member name="M:ADSD.JwtSecurityToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> from a string in JWS Compact serialized format.
            </summary>
            <param name="jwtEncodedString">A JSON Web Token that has been serialized in JWS Compact serialized format.</param>
            <exception cref="T:System.ArgumentNullException">'jwtEncodedString' is null.</exception>
            <exception cref="T:System.ArgumentException">'jwtEncodedString' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentException">'jwtEncodedString' is not in JWS Compact serialized format.</exception>
            <remarks>
            The contents of this <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> have not been validated, the JSON Web Token is simply decoded. Validation can be accomplished using <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.String,System.IdentityModel.Tokens.TokenValidationParameters,System.IdentityModel.Tokens.SecurityToken@)" />
            </remarks>
        </member>
        <member name="M:ADSD.JwtSecurityToken.#ctor(ADSD.JwtHeader,ADSD.JwtPayload,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> class where the <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> contains the crypto algorithms applied to the encoded <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> and <see cref="T:System.IdentityModel.Tokens.JwtPayload" />. The jwtEncodedString is the result of those operations.
            </summary>
            <param name="header">Contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT</param>
            <param name="payload">Contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }</param>
            <param name="rawHeader">base64urlencoded JwtHeader</param>
            <param name="rawPayload">base64urlencoded JwtPayload</param>
            <param name="rawSignature">base64urlencoded JwtSignature</param>
            <exception cref="T:System.ArgumentNullException">'header' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'payload' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'rawSignature' is null.</exception>
            <exception cref="T:System.ArgumentException">'rawHeader' or 'rawPayload' is null or whitespace.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityToken.#ctor(ADSD.JwtHeader,ADSD.JwtPayload)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> class where the <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> contains the crypto algorithms applied to the encoded <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> and <see cref="T:System.IdentityModel.Tokens.JwtPayload" />. The jwtEncodedString is the result of those operations.
            </summary>
            <param name="header">Contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT</param>
            <param name="payload">Contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }</param>
            <exception cref="T:System.ArgumentNullException">'header' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'payload' is null.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityToken.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime},ADSD.SigningCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> class specifying optional parameters.
            </summary>
            <param name="issuer">if this value is not null, a { iss, 'issuer' } claim will be added.</param>
            <param name="audience">if this value is not null, a { aud, 'audience' } claim will be added</param>
            <param name="claims">if this value is not null then for each <see cref="T:System.Security.Claims.Claim" /> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <param name="expires">if expires.HasValue a { exp, 'value' } claim is added.</param>
            <param name="notBefore">if notbefore.HasValue a { nbf, 'value' } claim is added.</param>
            <param name="signingCredentials">The <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials" /> that will be used to sign the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />. See <see cref="M:System.IdentityModel.Tokens.JwtHeader.#ctor(System.IdentityModel.Tokens.SigningCredentials)" /> for details pertaining to the Header Parameter(s).</param>
            <exception cref="T:System.ArgumentException">if 'expires' &lt;= 'notbefore'.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Actor">
            <summary>
            Gets the 'value' of the 'actor' claim { actort, 'value' }.
            </summary>
            <remarks>If the 'actor' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Audiences">
            <summary>Gets the list of 'audience' claim { aud, 'value' }.</summary>
            <remarks>If the 'audience' claim is not found, enumeration will be empty.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Claims">
            <summary>
            Gets the <see cref="T:System.Security.Claims.Claim" />(s) for this token.
            </summary>
            <remarks><para><see cref="T:System.Security.Claims.Claim" />(s) returned will NOT have the <see cref="P:System.Security.Claims.Claim.Type" /> translated according to <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap" /></para></remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.EncodedHeader">
            <summary>
            Gets the Base64UrlEncoded <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> associated with this instance.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityToken.EncodedPayload">
            <summary>
            Gets the Base64UrlEncoded <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> associated with this instance.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Header">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> associated with this instance.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Id">
            <summary>
            Gets the 'value' of the 'JWT ID' claim { jti, ''value' }.
            </summary>
            <remarks>If the 'JWT ID' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Issuer">
            <summary>
            Gets the 'value' of the 'issuer' claim { iss, 'value' }.
            </summary>
            <remarks>If the 'issuer' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Payload">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.JwtPayload" /> associated with this instance.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityToken.RawData">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.String)" />
            or <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String,System.String,System.String)" /></remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.RawHeader">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.String)" />
            or <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String,System.String,System.String)" /></remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.RawPayload">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.String)" />
            or <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String,System.String,System.String)" /></remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.RawSignature">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.String)" />
            or <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String,System.String,System.String)" /></remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.SecurityKeys">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.SecurityKey" />s for this instance.
            </summary>
            <remarks>By default an empty collection is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm associated with this instance.
            </summary>
            <remarks>if there is a <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials" /> associated with this instance, a value will be returned.  Null otherwise.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.SigningCredentials">
            <summary>
            Gets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials" /> associated with this instance.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityToken.SigningKey">
            <summary>
            Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that signed this instance.
            </summary>
            <remarks><see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler" />.ValidateSignature(...) sets this value when a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> is used to successfully validate a signature.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.SigningToken">
            <summary>
            Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that contains a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that signed this instance.
            </summary>
            <remarks><see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler" />.ValidateSignature(...) sets this value when a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> is used to successfully validate a signature.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.Subject">
            <summary>Gets "value" of the 'subject' claim { sub, 'value' }.</summary>
            <remarks>If the 'subject' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.ValidFrom">
            <summary>
            Gets 'value' of the 'notbefore' claim { nbf, 'value' } converted to a <see cref="T:System.DateTime" /> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'notbefore' claim is not found, then <see cref="F:System.DateTime.MinValue" /> is returned.</remarks>
        </member>
        <member name="P:ADSD.JwtSecurityToken.ValidTo">
            <summary>
            Gets 'value' of the 'expiration' claim { exp, 'value' } converted to a <see cref="T:System.DateTime" /> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue" /> is returned.</remarks>
        </member>
        <member name="M:ADSD.JwtSecurityToken.ToString">
            <summary>
            Decodes the <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> and <see cref="T:System.IdentityModel.Tokens.JwtPayload" />
            </summary>
            <returns>A string containing the header and payload in JSON format</returns>
        </member>
        <member name="M:ADSD.JwtSecurityToken.Decode(System.String)">
            <summary>
            Decodes the string into the header, payload and signature
            </summary>
            <param name="jwtEncodedString">Base64Url encoded string.</param>
        </member>
        <member name="T:ADSD.JwtSecurityTokenHandler">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> designed for creating and validating Json Web Tokens. See http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-07.
            </summary>
        </member>
        <member name="F:ADSD.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes">
            <summary>
            Default lifetime of tokens created. When creating tokens, if 'expires' and 'notbefore' are both null, then a default will be set to: expires = DateTime.UtcNow, notbefore = DateTime.UtcNow + TimeSpan.FromMinutes(TokenLifetimeInMinutes).
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.InboundAlgorithmMap">
            <summary>Gets or sets the <see cref="T:System.Collections.Generic.IDictionary`2" /> used to map Inbound Cryptographic Algorithms.</summary>
            <remarks>Strings that describe Cryptographic Algorithms that are understood by the runtime are not necessarily the same values used in the JsonWebToken specification.
            <para>When a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> signature is validated, the algorithm is obtained from the HeaderParameter { alg, 'value' }.
            The 'value' is translated according to this mapping and the translated 'value' is used when performing cryptographic operations.</para>
            <para>Default mapping is:</para>
            <para>    RS256 =&gt; http://www.w3.org/2001/04/xmldsig-more#rsa-sha256 </para>
            <para>    HS256 =&gt; http://www.w3.org/2001/04/xmldsig-more#hmac-sha256 </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.OutboundAlgorithmMap">
            <summary>Gets or sets the <see cref="T:System.Collections.Generic.IDictionary`2" /> used to map Outbound Cryptographic Algorithms.</summary>
            <remarks>Strings that describe Cryptographic Algorithms understood by the runtime are not necessarily the same in the JsonWebToken specification.
            <para>This property contains mappings the will be used to when creating a <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> and setting the HeaderParameter { alg, 'value' }.
            The 'value' set is translated according to this mapping.
            </para>
            <para>Default mapping is:</para>
            <para>    http://www.w3.org/2001/04/xmldsig-more#rsa-sha256  =&gt; RS256</para>
            <para>    http://www.w3.org/2001/04/xmldsig-more#hmac-sha256 =&gt; HS256</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.InboundClaimTypeMap">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap" /> that is used when setting the <see cref="P:System.Security.Claims.Claim.Type" /> for claims in the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> extracted when validating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.
            <para>The <see cref="P:System.Security.Claims.Claim.Type" /> is set to the JSON claim 'name' after translating using this mapping.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">'value is null.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.OutboundClaimTypeMap">
            <summary>
            <para>Gets or sets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> that is used when creating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> from <see cref="T:System.Security.Claims.Claim" />(s).</para>
            <para>The JSON claim 'name' value is set to <see cref="P:System.Security.Claims.Claim.Type" /> after translating using this mapping.</para>
            </summary>
            <remarks>This mapping is applied only when using <see cref="M:System.IdentityModel.Tokens.JwtPayload.AddClaim(System.Security.Claims.Claim)" /> or <see cref="M:System.IdentityModel.Tokens.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />. Adding values directly will not result in translation.</remarks>
            <exception cref="T:System.ArgumentNullException">'value is null.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.InboundClaimFilter">
            <summary>Gets or sets the <see cref="T:System.Collections.Generic.ISet`1" /> used to filter claims when populating a <see cref="T:System.Security.Claims.ClaimsIdentity" /> claims form a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.
            When a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> is validated, claims with types found in this <see cref="T:System.Collections.Generic.ISet`1" /> will not be added to the <see cref="T:System.Security.Claims.ClaimsIdentity" />.</summary>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.ShortClaimTypeProperty">
            <summary>
            Gets or sets the property name of <see cref="P:System.Security.Claims.Claim.Properties" /> the will contain the original JSON claim 'name' if a mapping occurred when the <see cref="T:System.Security.Claims.Claim" />(s) were created.
            <para>See <seealso cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap" /> for more information.</para>
            </summary>
            <exception cref="T:System.ArgumentException">if <see cref="T:System.String" />.IsIsNullOrWhiteSpace('value') is true.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.JsonClaimTypeProperty">
            <summary>
            Gets or sets the property name of <see cref="P:System.Security.Claims.Claim.Properties" /> the will contain .Net type that was recogninzed when JwtPayload.Claims serialized the value to JSON.
            <para>See <seealso cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap" /> for more information.</para>
            </summary>
            <exception cref="T:System.ArgumentException">if <see cref="T:System.String" />.IsIsNullOrWhiteSpace('value') is true.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.CanValidateToken">
            <summary>
            Returns 'true' which indicates this instance can validate a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.CanWriteToken">
            <summary>
            Returns 'true', which indicates this instance can write <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.
            </summary>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.TokenLifetimeInMinutes">
            <summary>Gets and sets the token lifetime in minutes.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' less than 1.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.MaximumTokenSizeInBytes">
            <summary>
            Gets and sets the maximum size in bytes, that a will be processed.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' less than 1.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.SignatureProviderFactory">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.SignatureProviderFactory" /> for creating <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />(s).
            </summary>
            <remarks>This extensibility point can be used to insert custom <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />(s).
            <para><see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForVerifying(System.IdentityModel.Tokens.SecurityKey,System.String)" /> is called to obtain a <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />(s) when needed.</para></remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:ADSD.JwtSecurityTokenHandler.TokenType">
            <summary>
            Gets the <see cref="T:System.Type" /> supported by this handler.
            </summary>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
            <summary>
            Determines if the <see cref="T:System.Xml.XmlReader" /> is positioned on a well formed &lt;BinarySecurityToken&gt; element.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader" /> positioned at xml.</param>
            <returns>
            <para>'true' if the reader is positioned at an element &lt;BinarySecurityToken&gt;.
            in the namespace: 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'</para>
            <para>With an attribute of 'valueType' equal to one of: </para>
            <para>    "urn:ietf:params:oauth:token-type:jwt", "JWT" </para>
            <para>
            For example: &lt;wsse:BinarySecurityToken valueType = "JWT"&gt; ...
            </para>
            'false' otherwise.
            </returns>
            <remarks>The 'EncodingType' attribute is optional, if it is set, it must be equal to: "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary".</remarks>
            <exception cref="T:System.ArgumentNullException">'reader' is null.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CanReadToken(System.String)">
            <summary>
            Determines if the string is a well formed Json Web token (see http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-07)
            </summary>
            <param name="tokenString">string that should represent a valid JSON Web Token.</param>
            <remarks>Uses <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" />( token, @"^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$" ).
            </remarks>
            <returns>
            <para>'true' if the token is in JSON compact serialization format.</para>
            <para>'false' if token.Length * 2 &gt;  <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.MaximumTokenSizeInBytes" />.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">'tokenString' is null.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CreateSecurityTokenReference(ADSD.SecurityToken,System.Boolean)">
            <summary>
            Creating <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> is not NotSupported.
            </summary>
            <exception cref="T:System.NotSupportedException"> to create a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CreateToken(ADSD.SimpleTokenDescriptor)">
            <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> based on values found in the <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" />.
            </summary>
            <param name="tokenDescriptor">Contains the parameters used to create the token.</param>
            <returns>A <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.</returns>
            <remarks>
            If <see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials" /> is not null, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.RawData" /> will be signed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">'tokenDescriptor' is null.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CreateToken(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},ADSD.SigningCredentials,ADSD.SignatureProvider)">
            <summary>
            Uses the <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String,System.String,System.String)" /> constructor, first creating the <see cref="T:System.IdentityModel.Tokens.JwtHeader" /> and <see cref="T:System.IdentityModel.Tokens.JwtPayload" />.
            <para>If <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> is not null, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.RawData" /> will be signed.</para>
            </summary>
            <param name="issuer">the issuer of the token.</param>
            <param name="audience">the audience for this token.</param>
            <param name="subject">the source of the <see cref="T:System.Security.Claims.Claim" />(s) for this token.</param>
            <param name="notBefore">the notbefore time for this token.</param>
            <param name="expires">the expiration time for this token.</param>
            <param name="signingCredentials">contains cryptographic material for generating a signature.</param>
            <param name="signatureProvider">optional <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />.</param>
            <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> is not null, then a claim { actort, 'value' } will be added to the payload. <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)" /> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.JwtHeader" /> for details on how the HeaderParameters are added to the header.</para>
            <para>See <seealso cref="T:System.IdentityModel.Tokens.JwtPayload" /> for details on how the values are added to the payload.</para></remarks>
            <para>If signautureProvider is not null, then it will be used to create the signature and <see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForSigning(System.IdentityModel.Tokens.SecurityKey,System.String)" /> will not be called.</para>
            <returns>A <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.</returns>
            <exception cref="T:System.ArgumentException">if 'expires' &lt;= 'notBefore'.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.GetTokenTypeIdentifiers">
            <summary>
            Gets the token type identifier(s) supported by this handler.
            </summary>
            <returns>A collection of strings that identify the tokens this instance can handle.</returns>
            <remarks>When receiving a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> wrapped inside a &lt;wsse:BinarySecurityToken&gt; element. The &lt;wsse:BinarySecurityToken&gt; element must have the ValueType attribute set to one of these values
            in order for this handler to recognize that it can read the token.</remarks>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
            <summary>
            Reads a JSON web token wrapped inside a WS-Security BinarySecurityToken xml element.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> pointing at the jwt.</param>
            <returns>An instance of <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /></returns>
            <remarks>First calls <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.CanReadToken
            <para>The reader must be positioned at an element named:</para>
            <para>BinarySecurityToken'.
            in the namespace: 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'
            with a 'ValueType' attribute equal to one of: "urn:ietf:params:oauth:token-type:jwt", "JWT".</para>
            <para>
            For example &lt;wsse:BinarySecurityToken valueType = "JWT"&gt; ...
            </para>
            <para>
            The 'EncodingType' attribute is optional, if it is set, it must be equal to: "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'reader' is null.</exception>
            <exception cref="T:System.ArgumentException">if <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" /> returns false.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ReadToken(System.String)">
            <summary>
            Reads a token encoded in JSON Compact serialized format.
            </summary>
            <param name="tokenString">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed
            using 'JSON Web Signature' (JWS).</param>
            <remarks>
            The JWT must be encoded using Base64Url encoding of the UTF-8 representation of the JWT: Header, Payload and Signature.
            The contents of the JWT returned are not validated in any way, the token is simply decoded. Use ValidateToken to validate the JWT.
            </remarks>
            <returns>A <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /></returns>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ValidateToken(ADSD.SecurityToken)">
            <summary>
            Obsolete method, use <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.String,System.IdentityModel.Tokens.TokenValidationParameters,System.IdentityModel.Tokens.SecurityToken@)" />.
            </summary>
            <exception cref="T:System.NotSupportedException"> use <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.String,System.IdentityModel.Tokens.TokenValidationParameters,System.IdentityModel.Tokens.SecurityToken@)" />.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ValidateToken(System.String,ADSD.TokenValidationParameters,ADSD.SecurityToken@)">
            <summary>
            Reads and validates a token encoded in JSON Compact serialized format.
            </summary>
            <param name="securityToken">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed using 'JSON Web Signature' (JWS).</param>
            <param name="validationParameters">Contains validation parameters for the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.</param>
            <param name="validatedToken">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> that was validated.</param>
            <exception cref="T:System.ArgumentNullException">'securityToken' is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>
            <exception cref="T:System.ArgumentException">'securityToken.Length' &gt; <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.MaximumTokenSizeInBytes" />.</exception>
            <returns>A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> from the jwt. Does not include the header claims.</returns>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,ADSD.SecurityToken)">
            <summary>
            Writes the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> wrapped in a WS-Security BinarySecurityToken using the <see cref="T:System.Xml.XmlWriter" />.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter" /> used to write token.</param>
            <param name="token">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> that will be written.</param>
            <exception cref="T:System.ArgumentNullException">'writer' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
            <exception cref="T:System.ArgumentException">'token' is not a not <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.</exception>
            <remarks>The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> current contents are encoded. If <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials" /> is not null, the encoding will contain a signature.</remarks>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.WriteToken(ADSD.SecurityToken)">
            <summary>
            Writes the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> as a JSON Compact serialized format string.
            </summary>
            <param name="token"><see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> to serialize.</param>
            <remarks>
            <para>If the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials" /> are not null, the encoding will contain a signature.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
            <exception cref="T:System.ArgumentException">'token' is not a not <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.</exception>
            <returns>The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> as a signed (if <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> exist) encoded string.</returns>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CreateSignature(System.String,ADSD.SecurityKey,System.String,ADSD.SignatureProvider)">
            <summary>
            Produces a signature over the 'input' using the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> and algorithm specified.
            </summary>
            <param name="inputString">string to be signed</param>
            <param name="key">the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> to use.</param>
            <param name="algorithm">the algorithm to use.</param>
            <param name="signatureProvider">if provided, the <see cref="T:System.IdentityModel.Tokens.SignatureProvider" /> will be used to sign the token</param>
            <returns>The signature over the bytes obtained from UTF8Encoding.GetBytes( 'input' ).</returns>
            <remarks>The <see cref="T:System.IdentityModel.Tokens.SignatureProvider" /> used to created the signature is obtained by calling <see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForSigning(System.IdentityModel.Tokens.SecurityKey,System.String)" />.</remarks>
            <exception cref="T:System.ArgumentNullException">'input' is null.</exception>
            <exception cref="T:System.InvalidProgramException"><see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForSigning(System.IdentityModel.Tokens.SecurityKey,System.String)" /> returns null.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ValidateSignature(System.String,ADSD.TokenValidationParameters)">
            <summary>
            Validates that the signature, if found and / or required is valid.
            </summary>
            <param name="token">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed
            using 'JSON Web Signature' (JWS).</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> that contains signing keys.</param>
            <exception cref="T:System.ArgumentNullException"> thrown if 'token is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException"> thrown if 'validationParameters is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException"> thrown if a signature is not found and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens" /> is true.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenSignatureKeyNotFoundException"> thrown if the 'token' has a key identifier and none of the <see cref="T:System.IdentityModel.Tokens.SecurityKey" />(s) provided result in a validated signature.
            This can indicate that a key refresh is required.</exception>
            <exception cref="T:System.IdentityModel.SignatureVerificationFailedException"> thrown if after trying all the <see cref="T:System.IdentityModel.Tokens.SecurityKey" />(s), none result in a validated signture AND the 'token' does not have a key identifier.</exception>
            <returns><see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> that has the signature validated if token was signed and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens" /> is true.</returns>
            <remarks><para>If the 'token' is signed, the signature is validated even if <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens" /> is false.</para>
            <para>If the 'token' signature is validated, then the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningKey" /> will be set to the key that signed the 'token'.</para></remarks>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CreateKeyString(ADSD.SecurityKey)">
            <summary>
            Produces a readable string for a key, used in error messages.
            </summary>
            <param name="securityKey"></param>
            <returns></returns>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CreateClaimsIdentity(ADSD.JwtSecurityToken,System.String,ADSD.TokenValidationParameters)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsIdentity" /> from a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> to use as a <see cref="T:System.Security.Claims.Claim" /> source.</param>
            <param name="issuer">The value to set <see cref="P:System.Security.Claims.Claim.Issuer" /></param>
            <param name="validationParameters"> contains parameters for validating the token.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> containing the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Claims" />.</returns>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Creates the 'value' for the actor claim: { actort, 'value' }
            </summary>
            <param name="actor"><see cref="T:System.Security.Claims.ClaimsIdentity" /> as actor.</param>
            <returns><see cref="T:System.String" /> representing the actor.</returns>
            <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.BootstrapContext" /> is not null:
            <para>  if 'type' is 'string', return as string.</para>
            <para>  if 'type' is 'BootstrapContext' and 'BootstrapContext.SecurityToken' is 'JwtSecurityToken'</para>
            <para>    if 'JwtSecurityToken.RawData' != null, return RawData.</para>
            <para>    else return <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />.</para>
            <para>  if 'BootstrapContext.Token' != null, return 'Token'.</para>
            <para>default: <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" /> new ( <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />( actor.Claims ).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'actor' is null.</exception>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Determines if the audiences found in a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> are valid.
            </summary>
            <param name="audiences">The audiences found in the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> being validated.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <remarks>see <see cref="M:System.IdentityModel.Tokens.Validators.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)" /> for additional details.</remarks>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Validates the lifetime of a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" />.
            </summary>
            <param name="notBefore">The <see cref="T:System.DateTime" /> value of the 'nbf' claim if it exists in the 'jwt'.</param>
            <param name="expires">The <see cref="T:System.DateTime" /> value of the 'exp' claim if it exists in the 'jwt'.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> being validated.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <remarks><see cref="M:System.IdentityModel.Tokens.Validators.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)" /> for additional details.</remarks>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ValidateIssuer(System.String,ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Determines if an issuer found in a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> is valid.
            </summary>
            <param name="issuer">The issuer to validate</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> that is being validated.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <returns>The issuer to use when creating the <see cref="T:System.Security.Claims.Claim" />(s) in the <see cref="T:System.Security.Claims.ClaimsIdentity" />.</returns>
            <remarks><see cref="M:System.IdentityModel.Tokens.Validators.ValidateIssuer(System.String,System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)" /> for additional details.</remarks>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ResolveIssuerSigningKey(System.String,ADSD.SecurityToken,ADSD.SecurityKeyIdentifier,ADSD.TokenValidationParameters)">
            <summary>
            Returns a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> to use when validating the signature of a token.
            </summary>
            <param name="token">the <see cref="T:System.String" /> representation of the token that is being validated.</param>
            <param name="securityToken">the <SecurityToken> that is being validated.</SecurityToken></param>
            <param name="keyIdentifier">the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> found in the token.</param>
            <param name="validationParameters">A <see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" />  required for validation.</param>
            <returns>Returns a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> to use for signature validation.</returns>
            <exception cref="T:System.ArgumentNullException">if 'keyIdentifier' is null.</exception>
            <exception cref="T:System.ArgumentNullException">if 'validationParameters' is null.</exception>
            <remarks>If key fails to resolve, then null is returned</remarks>
        </member>
        <member name="M:ADSD.JwtSecurityTokenHandler.ValidateIssuerSecurityKey(ADSD.SecurityKey,ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Validates the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningKey" /> is an expected value.
            </summary>
            <param name="securityKey">The <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that signed the <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken" /> to validate.</param>
            <param name="validationParameters">the current <see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" />.</param>
            <remarks>If the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningKey" /> is a <see cref="T:System.IdentityModel.Tokens.X509SecurityKey" /> then the X509Certificate2 will be validated using <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.CertificateValidator" />.</remarks>
        </member>
        <member name="T:ADSD.KeyInfo">
            <summary>Represents an XML digital signature or XML encryption <see langword="&lt;KeyInfo&gt;" /> element.</summary>
        </member>
        <member name="M:ADSD.KeyInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> class.</summary>
        </member>
        <member name="P:ADSD.KeyInfo.Id">
            <summary>Gets or sets the key information identity.</summary>
            <returns>The key information identity.</returns>
        </member>
        <member name="M:ADSD.KeyInfo.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfo.LoadXml(System.Xml.XmlElement)">
            <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> state from an XML element.</summary>
            <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> state. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
        </member>
        <member name="P:ADSD.KeyInfo.Count">
            <summary>Gets the number of <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
            <returns>The number of <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfo.AddClause(ADSD.KeyInfoClause)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> that represents a particular type of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> information to the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
            <param name="clause">The <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object. </param>
        </member>
        <member name="M:ADSD.KeyInfo.GetEnumerator">
            <summary>Returns an enumerator of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
            <returns>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:ADSD.KeyInfo.GetEnumerator(System.Type)">
            <summary>Returns an enumerator of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects of the specified type in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
            <param name="requestedObjectType">The type of object to enumerate. </param>
            <returns>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:ADSD.KeyInfoClause">
            <summary>Represents the abstract base class from which all implementations of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> subelements inherit.</summary>
        </member>
        <member name="M:ADSD.KeyInfoClause.GetXml">
            <summary>When overridden in a derived class, returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />.</summary>
            <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />.</returns>
        </member>
        <member name="M:ADSD.KeyInfoClause.LoadXml(System.Xml.XmlElement)">
            <summary>When overridden in a derived class, parses the input <see cref="T:System.Xml.XmlElement" /> and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> to match.</summary>
            <param name="element">The <see cref="T:System.Xml.XmlElement" /> that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />. </param>
        </member>
        <member name="T:ADSD.KeyInfoEncryptedKey">
            <summary>Wraps the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> class, it to be placed as a subelement of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> class.</summary>
        </member>
        <member name="M:ADSD.KeyInfoEncryptedKey.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> class. </summary>
        </member>
        <member name="M:ADSD.KeyInfoEncryptedKey.#ctor(ADSD.EncryptedKey)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> class using an <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object.</summary>
            <param name="encryptedKey">An <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />  object that encapsulates an encrypted key.</param>
        </member>
        <member name="P:ADSD.KeyInfoEncryptedKey.EncryptedKey">
            <summary>Gets or sets an <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object that encapsulates an encrypted key.</summary>
            <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object that encapsulates an encrypted key.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.EncryptedKey" /> property is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.KeyInfoEncryptedKey.GetXml">
            <summary>Returns an XML representation of a <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object.</summary>
            <returns>An XML representation of a <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object. </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The encrypted key is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.KeyInfoEncryptedKey.LoadXml(System.Xml.XmlElement)">
            <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object to match.</summary>
            <param name="value">The <see cref="T:System.Xml.XmlElement" /> object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object.</param>
        </member>
        <member name="T:ADSD.KeyInfoName">
            <summary>Represents a <see langword="&lt;KeyName&gt;" /> subelement of an XMLDSIG or XML Encryption <see langword="&lt;KeyInfo&gt;" /> element.</summary>
        </member>
        <member name="M:ADSD.KeyInfoName.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> class.</summary>
        </member>
        <member name="M:ADSD.KeyInfoName.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> class by specifying the string identifier that is the value of the <see langword="&lt;KeyName&gt;" /> element.</summary>
            <param name="keyName">The string identifier that is the value of the <see langword="&lt;KeyName&gt;" /> element.</param>
        </member>
        <member name="P:ADSD.KeyInfoName.Value">
            <summary>Gets or sets the string identifier contained within a <see langword="&lt;KeyName&gt;" /> element.</summary>
            <returns>The string identifier that is the value of the <see langword="&lt;KeyName&gt;" /> element.</returns>
        </member>
        <member name="M:ADSD.KeyInfoName.GetXml">
            <summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object.</summary>
            <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfoName.LoadXml(System.Xml.XmlElement)">
            <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object to match.</summary>
            <param name="value">The <see cref="T:System.Xml.XmlElement" /> object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
        </member>
        <member name="T:ADSD.KeyInfoNode">
            <summary>Handles <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> subelements that do not have specific implementations or handlers registered on the machine.</summary>
        </member>
        <member name="M:ADSD.KeyInfoNode.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" /> class.</summary>
        </member>
        <member name="M:ADSD.KeyInfoNode.#ctor(System.Xml.XmlElement)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" /> class with content taken from the specified <see cref="T:System.Xml.XmlElement" />.</summary>
            <param name="node">An XML element from which to take the content used to create the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />. </param>
        </member>
        <member name="P:ADSD.KeyInfoNode.Value">
            <summary>Gets or sets the XML content of the current <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</summary>
            <returns>The XML content of the current <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</returns>
        </member>
        <member name="M:ADSD.KeyInfoNode.GetXml">
            <summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</summary>
            <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</returns>
        </member>
        <member name="M:ADSD.KeyInfoNode.LoadXml(System.Xml.XmlElement)">
            <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" /> to match.</summary>
            <param name="value">The <see cref="T:System.Xml.XmlElement" /> that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />. </param>
        </member>
        <member name="T:ADSD.KeyInfoRetrievalMethod">
            <summary>References <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> objects stored at a different location when using XMLDSIG or XML encryption.</summary>
        </member>
        <member name="M:ADSD.KeyInfoRetrievalMethod.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> class.</summary>
        </member>
        <member name="M:ADSD.KeyInfoRetrievalMethod.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> class with the specified Uniform Resource Identifier (URI) pointing to the referenced <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
            <param name="strUri">The Uniform Resource Identifier (URI) of the information to be referenced by the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />. </param>
        </member>
        <member name="M:ADSD.KeyInfoRetrievalMethod.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> class with the specified Uniform Resource Identifier (URI) pointing to the referenced <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object and the URI that describes the type of data to retrieve.  </summary>
            <param name="strUri">The Uniform Resource Identifier (URI) of the information to be referenced by the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />.</param>
            <param name="typeName">The URI that describes the type of data to retrieve.</param>
        </member>
        <member name="P:ADSD.KeyInfoRetrievalMethod.Uri">
            <summary>Gets or sets the Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</summary>
            <returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</returns>
        </member>
        <member name="P:ADSD.KeyInfoRetrievalMethod.Type">
            <summary>Gets or sets a Uniform Resource Identifier (URI) that describes the type of data to be retrieved.</summary>
            <returns>A Uniform Resource Identifier (URI) that describes the type of data to be retrieved.</returns>
        </member>
        <member name="M:ADSD.KeyInfoRetrievalMethod.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfoRetrievalMethod.LoadXml(System.Xml.XmlElement)">
            <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object to match.</summary>
            <param name="value">The XML element that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
        </member>
        <member name="T:ADSD.KeyInfoX509Data">
            <summary>Represents an <see langword="&lt;X509Data&gt;" /> subelement of an XMLDSIG or XML Encryption <see langword="&lt;KeyInfo&gt;" /> element.</summary>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class.</summary>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class from the specified ASN.1 DER encoding of an X.509v3 certificate.</summary>
            <param name="rgbCert">The ASN.1 DER encoding of an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> from.</param>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class from the specified X.509v3 certificate.</summary>
            <param name="cert">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> from.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cert" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509IncludeOption)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class from the specified X.509v3 certificate.</summary>
            <param name="cert">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> from.</param>
            <param name="includeOption">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509IncludeOption" /> values that specifies how much of the certificate chain to include.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cert" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate has only a partial certificate chain.</exception>
        </member>
        <member name="P:ADSD.KeyInfoX509Data.Certificates">
            <summary>Gets a list of the X.509v3 certificates contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <returns>A list of the X.509 certificates contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>Adds the specified X.509v3 certificate to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />.</summary>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="certificate" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.KeyInfoX509Data.SubjectKeyIds">
            <summary>Gets a list of the subject key identifiers (SKIs) contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <returns>A list of the subject key identifiers (SKIs) contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.AddSubjectKeyId(System.Byte[])">
            <summary>Adds the specified subject key identifier (SKI) byte array to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <param name="subjectKeyId">A byte array that represents the subject key identifier (SKI) to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object. </param>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.AddSubjectKeyId(System.String)">
            <summary>Adds the specified subject key identifier (SKI) string to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <param name="subjectKeyId">A string that represents the subject key identifier (SKI) to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</param>
        </member>
        <member name="P:ADSD.KeyInfoX509Data.SubjectNames">
            <summary>Gets a list of the subject names of the entities contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <returns>A list of the subject names of the entities contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.AddSubjectName(System.String)">
            <summary>Adds the subject name of the entity that was issued an X.509v3 certificate to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <param name="subjectName">The name of the entity that was issued an X.509 certificate to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object. </param>
        </member>
        <member name="P:ADSD.KeyInfoX509Data.IssuerSerials">
            <summary>Gets a list of <see cref="T:System.Security.Cryptography.Xml.X509IssuerSerial" /> structures that represent an issuer name and serial number pair.</summary>
            <returns>A list of <see cref="T:System.Security.Cryptography.Xml.X509IssuerSerial" /> structures that represent an issuer name and serial number pair.</returns>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.AddIssuerSerial(System.String,System.String)">
            <summary>Adds the specified issuer name and serial number pair to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <param name="issuerName">The issuer name portion of the pair to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object. </param>
            <param name="serialNumber">The serial number portion of the pair to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object. </param>
        </member>
        <member name="P:ADSD.KeyInfoX509Data.CRL">
            <summary>Gets or sets the Certificate Revocation List (CRL) contained within the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <returns>The Certificate Revocation List (CRL) contained within the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.GetXml">
            <summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</summary>
            <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object.</returns>
        </member>
        <member name="M:ADSD.KeyInfoX509Data.LoadXml(System.Xml.XmlElement)">
            <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object to match.</summary>
            <param name="element">The <see cref="T:System.Xml.XmlElement" /> object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> object. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="element" /> parameter does not contain an &lt;<see langword="X509IssuerName" />&gt; node.-or-The <paramref name="element" /> parameter does not contain an &lt;<see langword="X509SerialNumber" />&gt; node.</exception>
        </member>
        <member name="T:ADSD.KeyReference">
            <summary>Represents the <see langword="&lt;KeyReference&gt;" /> element used in XML encryption. This class cannot be inherited.</summary>
        </member>
        <member name="M:ADSD.KeyReference.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> class for XML encryption.</summary>
        </member>
        <member name="M:ADSD.KeyReference.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> class for XML encryption using the supplied Uniform Resource Identifier (URI).</summary>
            <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted key.</param>
        </member>
        <member name="M:ADSD.KeyReference.#ctor(System.String,ADSD.TransformChain)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> class for XML encryption using the specified Uniform Resource Identifier (URI) and a <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</summary>
            <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted key.</param>
            <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms to do on the encrypted key.</param>
        </member>
        <member name="T:ADSD.LocalIdKeyIdentifierClause">
            <summary>Represents a key identifier clause that identifies a security tokens specified in the security header of the SOAP message.</summary>
        </member>
        <member name="M:ADSD.LocalIdKeyIdentifierClause.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> class using the specified identifier and array of types. </summary>
            <param name="localId">The value of the <see langword="wsu:Id" /> attribute for an XML element within the current SOAP message. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="localId" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="localId" /> is empty.</exception>
        </member>
        <member name="M:ADSD.LocalIdKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> class using the specified identifier, nonce, derived key length an owner security token type.</summary>
            <param name="localId">The value of the <see langword="wsu:Id" /> attribute for an XML element within the current SOAP message. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</param>
            <param name="derivationNonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
            <param name="derivationLength">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
            <param name="ownerType">A <see cref="T:System.Type" /> that is the type of security token that is referred to by the <paramref name="localId" /> parameter. Sets the value of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="localId" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="localId" /> is empty.</exception>
        </member>
        <member name="P:ADSD.LocalIdKeyIdentifierClause.LocalId">
            <summary>Gets the value of the <see langword="wsu:Id" /> attribute for an XML element within the current SOAP message.</summary>
            <returns>The value of the <see langword="wsu:Id" /> attribute for an XML element within the current SOAP message.</returns>
        </member>
        <member name="P:ADSD.LocalIdKeyIdentifierClause.OwnerType">
            <summary>Gets the type of security token that is referred to by the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</summary>
            <returns>A <see cref="T:System.Type" /> that contains the type of security token that is referred to by the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> property.</returns>
        </member>
        <member name="M:ADSD.LocalIdKeyIdentifierClause.Matches(ADSD.SecurityKeyIdentifierClause)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
            <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
            <returns>
            <see langword="true" /> if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> and the values of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> and <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> properties match the current instance; otherwise, <see langword="false" />. See the remarks for more details.</returns>
        </member>
        <member name="M:ADSD.LocalIdKeyIdentifierClause.Matches(System.String,System.Type)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified reference and type.</summary>
            <param name="localId">The value of the <see langword="wsu:Id" /> attribute for an XML element within the current SOAP message. </param>
            <param name="ownerType">A <see cref="T:System.Type" /> that is the type of security token that is referred to by the <paramref name="localId" /> parameter. </param>
            <returns>
            <see langword="true" /> if the <paramref name="localId" /> and <paramref name="ownerType" /> parameters match the values of the <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> and <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> properties; otherwise, <see langword="false" />. See the remarks for more details.</returns>
        </member>
        <member name="M:ADSD.LocalIdKeyIdentifierClause.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
        </member>
        <member name="T:ADSD.NamedKeySecurityKeyIdentifierClause">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that can be used to match <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityToken" />.
            </summary>
        </member>
        <member name="M:ADSD.NamedKeySecurityKeyIdentifierClause.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause" /> class. The 'name' for matching key identifiers found in the securityToken.
            </summary>
            <param name="name">Used to identify a named collection of keys.</param>
            <param name="id">Additional information for matching.</param>
            <exception cref="T:System.ArgumentNullException">if 'name' is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">if 'id' is null or whitespace</exception>
        </member>
        <member name="P:ADSD.NamedKeySecurityKeyIdentifierClause.Name">
            <summary>
            Gets the name of the <see cref="T:System.IdentityModel.Tokens.SecurityKey" />(s) this <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause" /> represents.
            </summary>
        </member>
        <member name="M:ADSD.NamedKeySecurityKeyIdentifierClause.Matches(ADSD.SecurityKeyIdentifierClause)">
            <summary>
            Determines if a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> matches this instance.
            </summary>
            <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to match.</param>
            <returns>true if:
            <para>    1. keyIdentifierClause is a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause" />.</para>
            <para>    2. string.Equals( keyIdentifierClause.Name, this.Name, StringComparison.Ordinal).</para>
            <para>    2. string.Equals( keyIdentifierClause.Id, this.Id, StringComparison.Ordinal).</para>
            <para>Otherwise calls base.Matches( keyIdentifierClause ).</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">'keyIdentifierClause' is null.</exception>
        </member>
        <member name="T:ADSD.Reference">
            <summary>
            XML Reference
            </summary>
        </member>
        <member name="M:ADSD.Reference.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Reference" /> class with default properties.</summary>
        </member>
        <member name="M:ADSD.Reference.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Reference" /> class with a hash value of the specified <see cref="T:System.IO.Stream" />.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> with which to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.Reference" />. </param>
        </member>
        <member name="M:ADSD.Reference.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Reference" /> class with the specified <see cref="T:System.Uri" />.</summary>
            <param name="uri">The <see cref="T:System.Uri" /> with which to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.Reference" />. </param>
        </member>
        <member name="P:ADSD.Reference.Id">
            <summary>Gets or sets the ID of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</summary>
            <returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />. The default is <see langword="null" />.</returns>
        </member>
        <member name="P:ADSD.Reference.Uri">
            <summary>Gets or sets the <see cref="T:System.Uri" /> of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</summary>
            <returns>The <see cref="T:System.Uri" /> of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</returns>
        </member>
        <member name="P:ADSD.Reference.Type">
            <summary>Gets or sets the type of the object being signed.</summary>
            <returns>The type of the object being signed.</returns>
        </member>
        <member name="P:ADSD.Reference.DigestMethod">
            <summary>Gets or sets the digest method Uniform Resource Identifier (URI) of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</summary>
            <returns>The digest method URI of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />. The default value is "http://www.w3.org/2000/09/xmldsig#sha1".</returns>
        </member>
        <member name="P:ADSD.Reference.DigestValue">
            <summary>Gets or sets the digest value of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</summary>
            <returns>The digest value of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</returns>
        </member>
        <member name="P:ADSD.Reference.TransformChain">
            <summary>Gets the transform chain of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</summary>
            <returns>The transform chain of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />.</returns>
        </member>
        <member name="M:ADSD.Reference.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.Reference" />.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.Reference" />.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.Reference.DigestMethod" /> property is <see langword="null" />.-or- The <see cref="P:System.Security.Cryptography.Xml.Reference.DigestValue" /> property is <see langword="null" />. </exception>
        </member>
        <member name="M:ADSD.Reference.LoadXml(System.Xml.XmlElement)">
            <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.Reference" /> state from an XML element.</summary>
            <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.Reference" /> state. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter does not contain any transforms.-or- The <paramref name="value" /> parameter contains an unknown transform. </exception>
        </member>
        <member name="M:ADSD.Reference.AddTransform(ADSD.Transform)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" /> object to the list of transforms to be performed on the data before passing it to the digest algorithm.</summary>
            <param name="transform">The transform to be added to the list of transforms. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.ReferenceList">
            <summary>Represents the <see langword="&lt;ReferenceList&gt;" /> element used in XML encryption. This class cannot be inherited.</summary>
        </member>
        <member name="M:ADSD.ReferenceList.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> class. </summary>
        </member>
        <member name="M:ADSD.ReferenceList.GetEnumerator">
            <summary>Returns an enumerator that iterates through a <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through a <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</returns>
        </member>
        <member name="P:ADSD.ReferenceList.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object.</returns>
        </member>
        <member name="M:ADSD.ReferenceList.Add(System.Object)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</summary>
            <param name="value">A <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to add to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</param>
            <returns>The position at which the new element was inserted.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="value" /> parameter is not a <see cref="T:System.Security.Cryptography.Xml.DataReference" />  object.-or-The <paramref name="value" /> parameter is not a <see cref="T:System.Security.Cryptography.Xml.KeyReference" />  object.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.ReferenceList.Clear">
            <summary>Removes all items from the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</summary>
        </member>
        <member name="M:ADSD.ReferenceList.Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection contains a specific <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object.</summary>
            <param name="value">The <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to locate in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection. </param>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object is found in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:ADSD.ReferenceList.IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</summary>
            <param name="value">The <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to locate in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</param>
            <returns>The index of <paramref name="value" /> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:ADSD.ReferenceList.Insert(System.Int32,System.Object)">
            <summary>Inserts a <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object into the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection at the specified position.</summary>
            <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
            <param name="value">A <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to insert into the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="value" /> parameter is not a <see cref="T:System.Security.Cryptography.Xml.DataReference" />  object.-or-The <paramref name="value" /> parameter is not a <see cref="T:System.Security.Cryptography.Xml.KeyReference" />  object.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.ReferenceList.Remove(System.Object)">
            <summary>Removes the first occurrence of a specific <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object from the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</summary>
            <param name="value">The <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to remove from the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> collection.</param>
        </member>
        <member name="M:ADSD.ReferenceList.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object at the specified index.</summary>
            <param name="index">The zero-based index of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to remove.</param>
        </member>
        <member name="P:ADSD.ReferenceList.Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object at the specified index.</summary>
            <param name="index">The index of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> or <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to return.</param>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object at the specified index.</returns>
        </member>
        <member name="M:ADSD.ReferenceList.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object to an array, starting at a specified array index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:ADSD.ReferenceList.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object.</returns>
        </member>
        <member name="P:ADSD.ReferenceList.IsSynchronized">
            <summary>Gets a value that indicates whether access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object is synchronized (thread safe).</summary>
            <returns>
            <see langword="true" /> if access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object is synchronized (thread safe); otherwise, <see langword="false" />. </returns>
        </member>
        <member name="T:ADSD.RIPEMD160Managed">
            <summary>Computes the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash for the input data using the managed library. </summary>
        </member>
        <member name="M:ADSD.RIPEMD160Managed.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RIPEMD160" /> class.</summary>
            <exception cref="T:System.InvalidOperationException">The policy is not compliant with the FIPS algorithm.</exception>
        </member>
        <member name="M:ADSD.RIPEMD160Managed.Create">
            <summary>Creates an instance of the default implementation of the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash algorithm.</summary>
            <returns>A new instance of the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash algorithm.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but it is not FIPS-compatible.</exception>
        </member>
        <member name="M:ADSD.RIPEMD160Managed.Create(System.String)">
            <summary>Creates an instance of the specified implementation of the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash algorithm.</summary>
            <param name="hashName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.RIPEMD160" /> to use. </param>
            <returns>A new instance of the specified implementation of <see cref="T:System.Security.Cryptography.RIPEMD160" />.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">The algorithm described by the <paramref name="hashName" /> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but it is not FIPS-compatible.</exception>
        </member>
        <member name="M:ADSD.RIPEMD160Managed.Initialize">
            <summary>Initializes an instance of the <see cref="T:System.Security.Cryptography.RIPEMD160Managed" /> class using the managed library.</summary>
        </member>
        <member name="M:ADSD.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, routes data written to the object into the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash algorithm for computing the hash.</summary>
            <param name="rgb">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:ADSD.RIPEMD160Managed.HashFinal">
            <summary>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</summary>
            <returns>The computed hash code in a byte array.</returns>
        </member>
        <member name="T:ADSD.RSAKeyValue">
            <summary>Represents the &lt;<see langword="RSAKeyValu" />e&gt; element of an XML signature.</summary>
        </member>
        <member name="M:ADSD.RSAKeyValue.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.RSAKeyValue" /> class with a new randomly generated <see cref="T:System.Security.Cryptography.RSA" /> public key.</summary>
        </member>
        <member name="M:ADSD.RSAKeyValue.#ctor(System.Security.Cryptography.RSA)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.RSAKeyValue" /> class with the specified <see cref="T:System.Security.Cryptography.RSA" /> public key.</summary>
            <param name="key">The instance of an implementation of <see cref="T:System.Security.Cryptography.RSA" /> that holds the public key. </param>
        </member>
        <member name="P:ADSD.RSAKeyValue.Key">
            <summary>Gets or sets the instance of <see cref="T:System.Security.Cryptography.RSA" /> that holds the public key.</summary>
            <returns>The instance of <see cref="T:System.Security.Cryptography.RSA" /> that holds the public key.</returns>
        </member>
        <member name="M:ADSD.RSAKeyValue.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.RSA" /> key clause.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.RSA" /> key clause.</returns>
        </member>
        <member name="M:ADSD.RSAKeyValue.LoadXml(System.Xml.XmlElement)">
            <summary>Loads an <see cref="T:System.Security.Cryptography.RSA" /> key clause from an XML element.</summary>
            <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.RSA" /> key clause. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter is not a valid <see cref="T:System.Security.Cryptography.RSA" /> key clause XML element. </exception>
        </member>
        <member name="T:ADSD.SecurityKey">
            <summary>Base class for security keys.</summary>
        </member>
        <member name="P:ADSD.SecurityKey.KeySize">
            <summary>When overridden in a derived class, gets the size, in bits, of the key.</summary>
            <returns>The size, in bits, of the key.</returns>
        </member>
        <member name="M:ADSD.SecurityKey.DecryptKey(System.String,System.Byte[])">
            <summary>When overridden in a derived class, decrypts the specified encrypted key.</summary>
            <param name="algorithm">The cryptographic algorithm that was used to encrypt the key.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
        </member>
        <member name="M:ADSD.SecurityKey.EncryptKey(System.String,System.Byte[])">
            <summary>When overridden in a derived class, encrypts the specified key.</summary>
            <param name="algorithm">The cryptographic algorithm to encrypt the key with.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
        </member>
        <member name="M:ADSD.SecurityKey.IsAsymmetricAlgorithm(System.String)">
            <summary>When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys. </summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm uses asymmetric keys; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:ADSD.SecurityKey.IsSupportedAlgorithm(System.String)">
            <summary>When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class. </summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is supported by this class; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.SecurityKey.IsSymmetricAlgorithm(System.String)">
            <summary>When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm uses symmetric keys; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:ADSD.SecurityKeyIdentifier">
            <summary>Represents a key identifier.</summary>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> class.  </summary>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.#ctor(ADSD.SecurityKeyIdentifierClause[])">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> class using the specified key identifier clauses. </summary>
            <param name="clauses">An array of <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that contains the key identifier clauses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clauses" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifier.Item(System.Int32)">
            <summary>Gets the key identifier clause at the specified index.</summary>
            <param name="index">The zero-based index of the key identifier clause in the collection of key identifier clauses.</param>
            <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than 0.-or-
            <paramref name="index" /> is equal to or greater than <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Count" />.</exception>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifier.CanCreateKey">
            <summary>Gets a value that indicates whether a key can be created for at least one of the key identifier clauses. </summary>
            <returns>
            <see langword="true" /> if a key can be created for at least one of the key identifier clauses; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifier.Count">
            <summary>Gets the number of key identifier clauses.</summary>
            <returns>The number of key identifier clauses.</returns>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifier.IsReadOnly">
            <summary>Gets a value that indicates whether the properties of this instance are read-only.</summary>
            <returns>
            <see langword="true" /> if the properties of this instance are read-only; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.Add(ADSD.SecurityKeyIdentifierClause)">
            <summary>Adds a key identifier clause to the end of the list.</summary>
            <param name="clause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to be added to the end of the list.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clause" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.IsReadOnly" /> property is <see langword="true" />.</exception>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.CreateKey">
            <summary>Creates a key for one of the key identifier clauses.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that represents the created key.</returns>
            <exception cref="T:System.InvalidOperationException">A key could not be created for any of the key identifier clauses.</exception>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.Find``1">
            <summary>Searches for a key identifier clause of the specified type and returns the first occurrence within the entire collection. </summary>
            <typeparam name="TClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the type of key identifier clause to search the collection for.</typeparam>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection of key identifier clauses.</summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> for the collection.</returns>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.MakeReadOnly">
            <summary>Causes this instance to be read-only.</summary>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.ToString">
            <summary>Returns the current object.</summary>
            <returns>The current object.</returns>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifier.TryFind``1(``0@)">
            <summary>Searches for a key identifier clause of the specified type and returns a value that indicates whether a clause of that type could be found. When a type is found it is returned in the <see langword="out" /> parameter. </summary>
        </member>
        <member name="T:ADSD.SecurityKeyIdentifierClause">
            <summary>Represents an abstract base class for a key identifier clause.</summary>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifierClause.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> class using the specified key identifier clause type. </summary>
            <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifierClause.UpdateBytes(System.Byte[],System.Int32)">
            <summary>
            Reset stored data
            </summary>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> class using the specified key identifier clause type, nonce, and the derived key length. </summary>
            <param name="clauseType">The key identifier clause type. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> property.</param>
            <param name="nonce">An array of <see cref="T:System.Byte" /> that contains the nonce that was used to create a derived key. Sets the value that is returned by the <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> method.</param>
            <param name="length">The size of the derived key. Sets the value of the <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> property.</param>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifierClause.CanCreateKey">
            <summary>Gets a value that indicates whether a key can be created. </summary>
            <returns>
            <see langword="true" /> if a key can be created; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifierClause.ClauseType">
            <summary>Gets the key identifier clause type.</summary>
            <returns>The key identifier clause type.</returns>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifierClause.Id">
            <summary>Gets or sets the key identifier clause ID.</summary>
            <returns>The key identifier clause ID. The default is <see langword="null" />.</returns>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifierClause.CreateKey">
            <summary>Creates a key based on the parameters passed into the constructor.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the created key.</returns>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifierClause.Matches(ADSD.SecurityKeyIdentifierClause)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
            <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
            <returns>
            <see langword="true" /> if <paramref name="keyIdentifierClause" /> is the same instance as the current instance; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="keyIdentifierClause" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.SecurityKeyIdentifierClause.GetDerivationNonce">
            <summary>Gets the nonce that was used to generate the derived key.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the nonce that was used to generate the derived key.</returns>
        </member>
        <member name="P:ADSD.SecurityKeyIdentifierClause.DerivationLength">
            <summary>Gets the size of the derived key.</summary>
            <returns>The size of the derived key.</returns>
        </member>
        <member name="T:ADSD.SecurityToken">
            <summary>Represents a base class used to implement all security tokens.</summary>
        </member>
        <member name="P:ADSD.SecurityToken.Id">
            <summary>Gets a unique identifier of the security token.</summary>
            <returns>The unique identifier of the security token.</returns>
        </member>
        <member name="P:ADSD.SecurityToken.SecurityKeys">
            <summary>Gets the cryptographic keys associated with the security token.</summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
        </member>
        <member name="P:ADSD.SecurityToken.ValidFrom">
            <summary>Gets the first instant in time at which this security token is valid.</summary>
            <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
        </member>
        <member name="P:ADSD.SecurityToken.ValidTo">
            <summary>Gets the last instant in time at which this security token is valid.</summary>
            <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
        </member>
        <member name="M:ADSD.SecurityToken.CanCreateKeyIdentifierClause``1">
            <summary>Gets a value that indicates whether this security token is capable of creating the specified key identifier. </summary>
        </member>
        <member name="M:ADSD.SecurityToken.CreateKeyIdentifierClause``1">
            <summary>Creates the specified key identifier clause.</summary>
            <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that is a key identifier clause for the security token.</returns>
        </member>
        <member name="M:ADSD.SecurityToken.MatchesKeyIdentifierClause(ADSD.SecurityKeyIdentifierClause)">
            <summary>Returns a value that indicates whether the key identifier for this instance can be resolved to the specified key identifier.</summary>
            <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
            <returns>
            <see langword="true" /> if <paramref name="keyIdentifierClause" /> is a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> and it has the same unique identifier as the <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> property; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.SecurityToken.ResolveKeyIdentifierClause(ADSD.SecurityKeyIdentifierClause)">
            <summary>Gets the key for the specified key identifier clause.</summary>
            <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to get the key for.</param>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that represents the key.</returns>
        </member>
        <member name="T:ADSD.Signature">
            <summary>Represents the <see langword="&lt;Signature&gt;" /> element of an XML signature.</summary>
        </member>
        <member name="M:ADSD.Signature.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Signature" /> class.</summary>
        </member>
        <member name="P:ADSD.Signature.Id">
            <summary>Gets or sets the ID of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />.</summary>
            <returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />. The default is <see langword="null" />.</returns>
        </member>
        <member name="P:ADSD.Signature.SignedInfo">
            <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />.</summary>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />.</returns>
        </member>
        <member name="P:ADSD.Signature.SignatureValue">
            <summary>Gets or sets the value of the digital signature.</summary>
            <returns>A byte array that contains the value of the digital signature.</returns>
        </member>
        <member name="P:ADSD.Signature.KeyInfo">
            <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />.</summary>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />.</returns>
        </member>
        <member name="P:ADSD.Signature.ObjectList">
            <summary>Gets or sets a list of objects to be signed.</summary>
            <returns>A list of objects to be signed.</returns>
        </member>
        <member name="M:ADSD.Signature.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.Signature" />.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.Signature" />.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.Signature.SignedInfo" /> property is <see langword="null" />.-or- The <see cref="P:System.Security.Cryptography.Xml.Signature.SignatureValue" /> property is <see langword="null" />. </exception>
        </member>
        <member name="M:ADSD.Signature.LoadXml(System.Xml.XmlElement)">
            <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.Signature" /> state from an XML element.</summary>
            <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.Signature" /> state. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.Signature.SignatureValue" />.-or- The <paramref name="value" /> parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.Signature.SignedInfo" />. </exception>
        </member>
        <member name="M:ADSD.Signature.AddObject(ADSD.DataObject)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.DataObject" /> to the list of objects to be signed.</summary>
            <param name="dataObject">The <see cref="T:System.Security.Cryptography.Xml.DataObject" /> to be added to the list of objects to be signed. </param>
        </member>
        <member name="T:ADSD.SignatureProvider">
            <summary>
            This class defines the object model for types that provide signature services.
            </summary>
        </member>
        <member name="P:ADSD.SignatureProvider.Context">
            <summary>
            Gets or sets a user context for a <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />.
            </summary>
        </member>
        <member name="M:ADSD.SignatureProvider.Sign(System.Byte[])">
            <summary>Produces a signature over the 'input'</summary>
            <param name="input">bytes to sign.</param>
            <returns>signed bytes</returns>
        </member>
        <member name="M:ADSD.SignatureProvider.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies that a signature created over the 'input' matches the signature.
            </summary>
            <param name="input">bytes to verify.</param>
            <param name="signature">signature to compare against.</param>
            <returns>true if the computed signature matches the signature parameter, false otherwise.</returns>
        </member>
        <member name="M:ADSD.SignatureProvider.Dispose">
            <summary>
            Calls <see cref="M:System.IdentityModel.Tokens.SignatureProvider.Dispose(System.Boolean)" /> and <see cref="M:System.GC.SuppressFinalize(System.Object)" />
            </summary>
        </member>
        <member name="M:ADSD.SignatureProvider.Dispose(System.Boolean)">
            <summary>
            Can be over written in descendants to dispose of internal components.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer</param>
        </member>
        <member name="T:ADSD.SignatureProviderFactory">
            <summary>
            Creates <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />s by specifying a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> and algorithm.
            <para>Supports both <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> and <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.</para>
            </summary>
        </member>
        <member name="F:ADSD.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForSigning">
            <summary>
            This is the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />.KeySize when creating signatures.
            </summary>
        </member>
        <member name="F:ADSD.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForVerifying">
            <summary>
            This is the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />.KeySize when verifying signatures.
            </summary>
        </member>
        <member name="F:ADSD.SignatureProviderFactory.AbsoluteMinimumSymmetricKeySizeInBits">
            <summary>
            This is the minimum <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.KeySize when creating and verifying signatures.
            </summary>
        </member>
        <member name="P:ADSD.SignatureProviderFactory.MinimumSymmetricKeySizeInBits">
            <summary>
            Gets or sets the minimum <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.KeySize"/&gt;.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' is smaller than <see cref="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumSymmetricKeySizeInBits" />.</exception>
        </member>
        <member name="P:ADSD.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForSigning">
            <summary>
            Gets or sets the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />.KeySize for creating signatures.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' is smaller than <see cref="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForSigning" />.</exception>
        </member>
        <member name="P:ADSD.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForVerifying">
            <summary>
            Gets or sets the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />.KeySize for verifying signatures.
            <exception cref="T:System.ArgumentOutOfRangeException">'value' is smaller than <see cref="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForVerifying" />.</exception>
            </summary>
        </member>
        <member name="M:ADSD.SignatureProviderFactory.CreateForSigning(ADSD.SecurityKey,System.String)">
            <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.SignatureProvider" /> that supports the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> and algorithm.
            </summary>
            <param name="key">
            The <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> to use for signing.
            </param>
            <param name="algorithm">The algorithm to use for signing.</param>
            <exception cref="T:System.ArgumentNullException">
            'key' is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            'algorithm' is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            'algorithm' contains only whitespace.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            '<see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForSigning" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            '<see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumSymmetricKeySizeInBits" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            '<see cref="T:System.IdentityModel.Tokens.SecurityKey" />' is not a <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> or a <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.
            </exception>
            <remarks>
            AsymmetricSignatureProviders require access to a PrivateKey for Signing.
            </remarks>
            <returns>
            The <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />.
            </returns>
        </member>
        <member name="M:ADSD.SignatureProviderFactory.CreateForVerifying(ADSD.SecurityKey,System.String)">
            <summary>
            Returns a <see cref="T:System.IdentityModel.Tokens.SignatureProvider" /> instance supports the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> and algorithm.
            </summary>
            <param name="key">
            The <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> to use for signing.
            </param>
            <param name="algorithm">The algorithm to use for signing.</param>
            <exception cref="T:System.ArgumentNullException">
            'key' is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            'algorithm' is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            'algorithm' contains only whitespace.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            '<see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" />' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForVerifying" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            '<see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumSymmetricKeySizeInBits" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            '<see cref="T:System.IdentityModel.Tokens.SecurityKey" />' is not a <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> or a <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.
            </exception>
            <returns>
            The <see cref="T:System.IdentityModel.Tokens.SignatureProvider" />.
            </returns>
        </member>
        <member name="M:ADSD.SignatureProviderFactory.ReleaseProvider(ADSD.SignatureProvider)">
            <summary>
            When finished with a <see cref="T:System.IdentityModel.Tokens.SignatureProvider" /> call this method for cleanup. The default behavior is to call <see cref="M:System.IdentityModel.Tokens.SignatureProvider.Dispose(System.Boolean)" />
            </summary>
            <param name="signatureProvider"><see cref="T:System.IdentityModel.Tokens.SignatureProvider" /> to be released.</param>
        </member>
        <member name="T:ADSD.SignedInfo">
            <summary>Contains information about the canonicalization algorithm and signature algorithm used for the XML signature.</summary>
        </member>
        <member name="M:ADSD.SignedInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> class.</summary>
        </member>
        <member name="M:ADSD.SignedInfo.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection of references.</summary>
            <returns>An enumerator that iterates through the collection of references.</returns>
            <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
        </member>
        <member name="M:ADSD.SignedInfo.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of this instance into an <see cref="T:System.Array" /> object, starting at a specified index in the array.</summary>
            <param name="array">An <see cref="T:System.Array" /> object that holds the collection's elements. </param>
            <param name="index">The beginning index in the array where the elements are copied. </param>
            <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
        </member>
        <member name="P:ADSD.SignedInfo.Count">
            <summary>Gets the number of references in the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</summary>
            <returns>The number of references in the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</returns>
            <exception cref="T:System.NotSupportedException">This property is not supported. </exception>
        </member>
        <member name="P:ADSD.SignedInfo.IsReadOnly">
            <summary>Gets a value that indicates whether the collection is read-only.</summary>
            <returns>
            <see langword="true" /> if the collection is read-only; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.NotSupportedException">This property is not supported. </exception>
        </member>
        <member name="P:ADSD.SignedInfo.IsSynchronized">
            <summary>Gets a value that indicates whether the collection is synchronized.</summary>
            <returns>
            <see langword="true" /> if the collection is synchronized; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.NotSupportedException">This property is not supported. </exception>
        </member>
        <member name="P:ADSD.SignedInfo.SyncRoot">
            <summary>Gets an object to use for synchronization.</summary>
            <returns>An object to use for synchronization.</returns>
            <exception cref="T:System.NotSupportedException">This property is not supported. </exception>
        </member>
        <member name="P:ADSD.SignedInfo.Id">
            <summary>Gets or sets the ID of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</summary>
            <returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedInfo.CanonicalizationMethod">
            <summary>Gets or sets the canonicalization algorithm that is used before signing for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</summary>
            <returns>The canonicalization algorithm used before signing for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedInfo.CanonicalizationMethodObject">
            <summary>Gets a <see cref="T:System.Security.Cryptography.Xml.Transform" /> object used for canonicalization.</summary>
            <returns>A <see cref="T:System.Security.Cryptography.Xml.Transform" /> object used for canonicalization.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            <see cref="T:System.Security.Cryptography.Xml.Transform" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.SignedInfo.SignatureMethod">
            <summary>Gets or sets the name of the algorithm used for signature generation and validation for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</summary>
            <returns>The name of the algorithm used for signature generation and validation for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedInfo.SignatureLength">
            <summary>Gets or sets the length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</summary>
            <returns>The length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedInfo.References">
            <summary>Gets a list of the <see cref="T:System.Security.Cryptography.Xml.Reference" /> objects of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</summary>
            <returns>A list of the <see cref="T:System.Security.Cryptography.Xml.Reference" /> elements of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</returns>
        </member>
        <member name="M:ADSD.SignedInfo.GetXml">
            <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod" /> property is <see langword="null" />.-or- The <see cref="P:System.Security.Cryptography.Xml.SignedInfo.References" /> property is empty. </exception>
        </member>
        <member name="M:ADSD.SignedInfo.LoadXml(System.Xml.XmlElement)">
            <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> state from an XML element.</summary>
            <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> state. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter is not a valid <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> element.-or- The <paramref name="value" /> parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod" /> property.-or- The <paramref name="value" /> parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod" /> property.</exception>
        </member>
        <member name="M:ADSD.SignedInfo.AddReference(ADSD.Reference)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Reference" /> object to the list of references to digest and sign.</summary>
            <param name="reference">The reference to add to the list of references. </param>
            <exception cref="T:System.ArgumentNullException">The reference parameter is <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.SignedXml">
            <summary>Provides a wrapper on a core XML signature object to facilitate creating XML signatures.</summary>
        </member>
        <member name="F:ADSD.SignedXml.m_signature">
            <summary>Represents the <see cref="T:System.Security.Cryptography.Xml.Signature" /> object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object. </summary>
        </member>
        <member name="F:ADSD.SignedXml.m_strSigningKeyName">
            <summary>Represents the name of the installed key to be used for signing the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object. </summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigNamespaceUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard namespace for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigMinimalCanonicalizationUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard minimal canonicalization algorithm for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigCanonicalizationUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigCanonicalizationWithCommentsUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures and includes comments. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigSHA1Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA1" /> digest method for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigDSAUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.DSA" /> algorithm for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigRSASHA1Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.RSA" /> signature method for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigHMACSHA1Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.HMACSHA1" /> algorithm for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigSHA256Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA256" /> digest method for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigRSASHA256Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the  <see cref="T:System.Security.Cryptography.RSA" /> SHA-256 signature method variation for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigSHA384Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA384" /> digest method for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigRSASHA384Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the  <see cref="T:System.Security.Cryptography.RSA" /> SHA-384 signature method variation for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigSHA512Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA512" /> digest method for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigRSASHA512Url">
            <summary>Represents the Uniform Resource Identifier (URI) for the  <see cref="T:System.Security.Cryptography.RSA" /> SHA-512 signature method variation for XML digital signatures. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigC14NTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigC14NWithCommentsTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation, with comments. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigExcC14NTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization, with comments. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigBase64TransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the base 64 transformation. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigXPathTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the XML Path Language (XPath). This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigXsltTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for XSLT transformations. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDsigEnvelopedSignatureTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for enveloped signature transformation. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlDecryptionTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the XML mode decryption transformation. This field is constant.</summary>
        </member>
        <member name="F:ADSD.SignedXml.XmlLicenseTransformUrl">
            <summary>Represents the Uniform Resource Identifier (URI) for the license transform algorithm used to normalize XrML licenses for signatures.</summary>
        </member>
        <member name="M:ADSD.SignedXml.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> class.</summary>
        </member>
        <member name="M:ADSD.SignedXml.#ctor(System.Xml.XmlDocument)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> class from the specified XML document.</summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument" /> object to use to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.SignedXml" />. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="document" /> parameter is <see langword="null" />.-or-The <paramref name="document" /> parameter contains a null <see cref="P:System.Xml.XmlDocument.DocumentElement" /> property.</exception>
        </member>
        <member name="M:ADSD.SignedXml.#ctor(System.Xml.XmlElement)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> class from the specified <see cref="T:System.Xml.XmlElement" /> object.</summary>
            <param name="elem">The <see cref="T:System.Xml.XmlElement" /> object to use to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.SignedXml" />. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="elem" /> parameter is <see langword="null" />. </exception>
        </member>
        <member name="P:ADSD.SignedXml.SigningKeyName">
            <summary>Gets or sets the name of the installed key to be used for signing the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The name of the installed key to be used for signing the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.Resolver">
            <summary>Sets the current <see cref="T:System.Xml.XmlResolver" /> object.</summary>
            <returns>The current <see cref="T:System.Xml.XmlResolver" /> object. The defaults is a <see cref="T:System.Xml.XmlSecureResolver" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.SignatureFormatValidator">
            <summary>Gets a delegate that will be called to validate the format (not the cryptographic security) of an XML signature.</summary>
            <returns>
            <see langword="true" /> if the format is acceptable; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:ADSD.SignedXml.SafeCanonicalizationMethods">
            <summary>[Supported in the .NET Framework 4.5.1 and later versions] Gets the names of methods whose canonicalization algorithms are explicitly allowed. </summary>
            <returns>A collection of the names of methods that safely produce canonical XML. </returns>
        </member>
        <member name="P:ADSD.SignedXml.SigningKey">
            <summary>Gets or sets the asymmetric algorithm key used for signing a <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The asymmetric algorithm key used for signing the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.EncryptedXml">
            <summary>Gets or sets an <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object that defines the XML encryption processing rules.</summary>
            <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object that defines the XML encryption processing rules.</returns>
        </member>
        <member name="P:ADSD.SignedXml.Signature">
            <summary>Gets the <see cref="T:System.Security.Cryptography.Xml.Signature" /> object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.Signature" /> object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.SignedInfo">
            <summary>Gets the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.SignatureMethod">
            <summary>Gets the signature method of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The signature method of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.SignatureLength">
            <summary>Gets the length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.SignatureValue">
            <summary>Gets the signature value of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>A byte array that contains the signature value of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="P:ADSD.SignedXml.KeyInfo">
            <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</returns>
        </member>
        <member name="M:ADSD.SignedXml.GetXml">
            <summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object.</summary>
            <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.Signature" /> object.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> property is <see langword="null" />.-or- The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> property is <see langword="null" />. </exception>
        </member>
        <member name="M:ADSD.SignedXml.LoadXml(System.Xml.XmlElement)">
            <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> state from an XML element.</summary>
            <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> state from. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> property.-or- The <paramref name="value" /> parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> property.</exception>
        </member>
        <member name="M:ADSD.SignedXml.AddReference(ADSD.Reference)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Reference" /> object to the <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> object that describes a digest method, digest value, and transform to use for creating an XML digital signature.</summary>
            <param name="reference">The  <see cref="T:System.Security.Cryptography.Xml.Reference" /> object that describes a digest method, digest value, and transform to use for creating an XML digital signature.</param>
        </member>
        <member name="M:ADSD.SignedXml.AddObject(ADSD.DataObject)">
            <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object to the list of objects to be signed.</summary>
            <param name="dataObject">The <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object to add to the list of objects to be signed. </param>
        </member>
        <member name="M:ADSD.SignedXml.CheckSignature">
            <summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies using the public key in the signature.</summary>
            <returns>
            <see langword="true" /> if the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> property of the public key in the signature does not match the <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> property.-or- The signature description could not be created.-or The hash algorithm could not be created. </exception>
        </member>
        <member name="M:ADSD.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)">
            <summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies using the public key in the signature.</summary>
            <param name="signingKey">When this method returns, contains the implementation of <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that holds the public key in the signature. This parameter is passed uninitialized. </param>
            <returns>
            <see langword="true" /> if the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies using the public key in the signature; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="signingKey" /> parameter is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> property of the public key in the signature does not match the <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> property.-or- The signature description could not be created.-or The hash algorithm could not be created. </exception>
        </member>
        <member name="M:ADSD.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies for the specified key.</summary>
            <param name="key">The implementation of the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> property that holds the key to be used to verify the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property. </param>
            <returns>
            <see langword="true" /> if the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies for the specified key; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> property of the <paramref name="key" /> parameter does not match the <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> property.-or- The signature description could not be created.-or The hash algorithm could not be created. </exception>
        </member>
        <member name="M:ADSD.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)">
            <summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies for the specified message authentication code (MAC) algorithm.</summary>
            <param name="macAlg">The implementation of <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> that holds the MAC to be used to verify the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property. </param>
            <returns>
            <see langword="true" /> if the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies for the specified MAC; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="macAlg" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> property of the specified <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> object is not valid.-or- The <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property is <see langword="null" />.-or- The cryptographic transform used to check the signature could not be created. </exception>
        </member>
        <member name="M:ADSD.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)">
            <summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property verifies for the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object and, optionally, whether the certificate is valid.</summary>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object to use to verify the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property.</param>
            <param name="verifySignatureOnly">
            <see langword="true" /> to verify the signature only; <see langword="false" /> to verify both the signature and certificate.</param>
            <returns>
            <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />. -or-
            <see langword="true" /> if the signature and certificate are valid; otherwise, <see langword="false" />. </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="certificate" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">A signature description could not be created for the <paramref name="certificate" /> parameter.</exception>
        </member>
        <member name="M:ADSD.SignedXml.ComputeSignature">
            <summary>Computes an XML digital signature.</summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> property is <see langword="null" />.-or- The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> property is not a <see cref="T:System.Security.Cryptography.DSA" /> object or <see cref="T:System.Security.Cryptography.RSA" /> object.-or- The key could not be loaded. </exception>
        </member>
        <member name="M:ADSD.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)">
            <summary>Computes an XML digital signature using the specified message authentication code (MAC) algorithm.</summary>
            <param name="macAlg">A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> object that holds the MAC to be used to compute the value of the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> property. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="macAlg" /> parameter is <see langword="null" />. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> object specified by the <paramref name="macAlg" /> parameter is not an instance of <see cref="T:System.Security.Cryptography.HMACSHA1" />.-or- The <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> property of the specified <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> object is not valid.-or- The cryptographic transform used to check the signature could not be created. </exception>
        </member>
        <member name="M:ADSD.SignedXml.GetPublicKey">
            <summary>Returns the public key of a signature.</summary>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object that contains the public key of the signature, or <see langword="null" /> if the key cannot be found.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" /> property is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)">
            <summary>Returns the <see cref="T:System.Xml.XmlElement" /> object with the specified ID from the specified <see cref="T:System.Xml.XmlDocument" /> object.</summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument" /> object to retrieve the <see cref="T:System.Xml.XmlElement" /> object from.</param>
            <param name="idValue">The ID of the <see cref="T:System.Xml.XmlElement" /> object to retrieve from the <see cref="T:System.Xml.XmlDocument" /> object.</param>
            <returns>The <see cref="T:System.Xml.XmlElement" /> object with the specified ID from the specified <see cref="T:System.Xml.XmlDocument" /> object, or <see langword="null" /> if it could not be found.</returns>
        </member>
        <member name="T:ADSD.SigningCredentials">
            <summary>Represents the cryptographic key and security algorithms that are used to generate a digital signature.</summary>
        </member>
        <member name="M:ADSD.SigningCredentials.#ctor(ADSD.SecurityKey,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> class.  </summary>
            <param name="signingKey">A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to generate the digital signature. </param>
            <param name="signatureAlgorithm">A URI that represents the cryptographic algorithm that is used to generate the digital signature.</param>
            <param name="digestAlgorithm">A URI that represents the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</param>
        </member>
        <member name="M:ADSD.SigningCredentials.#ctor(ADSD.SecurityKey,System.String,System.String,ADSD.SecurityKeyIdentifier)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> class. </summary>
            <param name="signingKey">A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to generate the digital signature.</param>
            <param name="signatureAlgorithm">A URI that represents the cryptographic algorithm that is used to generate the digital signature.</param>
            <param name="digestAlgorithm">A URI that represents the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</param>
            <param name="signingKeyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that specifies the identifier that represents the key that is used to create a digital signature.</param>
        </member>
        <member name="P:ADSD.SigningCredentials.DigestAlgorithm">
            <summary>Gets the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</summary>
            <returns>A URI that represents the cryptographic algorithm that is used to compute the digest for the portion of the SOAP message that is to be digitally signed.</returns>
        </member>
        <member name="P:ADSD.SigningCredentials.SignatureAlgorithm">
            <summary>Gets the cryptographic algorithm that is used to generate the digital signature.</summary>
            <returns>A URI that represents the cryptographic algorithm that is used to generate the digital signature.</returns>
        </member>
        <member name="P:ADSD.SigningCredentials.SigningKey">
            <summary>Gets the cryptographic key that is used to generate the digital signature.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the cryptographic key that is used to generate the digital signature.</returns>
        </member>
        <member name="P:ADSD.SigningCredentials.SigningKeyIdentifier">
            <summary>Gets the identifier that represents the key that is used to create a digital signature.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that specifies the identifier that represents the key that is used to create a digital signature.</returns>
        </member>
        <member name="T:ADSD.Lifetime">
            <summary>
            
            </summary>
        </member>
        <member name="F:ADSD.Lifetime.Created">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="F:ADSD.Lifetime.Expires">
            <summary>
            Expiry date
            </summary>
        </member>
        <member name="T:ADSD.SimpleTokenDescriptor">
            <summary>
            Minimal token descriptor
            </summary>
        </member>
        <member name="F:ADSD.SimpleTokenDescriptor.Lifetime">
            <summary>
            Lifetime
            </summary>
        </member>
        <member name="F:ADSD.SimpleTokenDescriptor.TokenIssuerName">
            <summary>
            TokenIssuerName
            </summary>
        </member>
        <member name="F:ADSD.SimpleTokenDescriptor.AppliesToAddress">
            <summary>
            Target address
            </summary>
        </member>
        <member name="F:ADSD.SimpleTokenDescriptor.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="F:ADSD.SimpleTokenDescriptor.SigningCredentials">
            <summary>
            Credentials
            </summary>
        </member>
        <member name="T:ADSD.SoapHexBinary">
            <summary>Wraps an XSD <see langword="hexBinary" /> type.</summary>
        </member>
        <member name="P:ADSD.SoapHexBinary.XsdType">
            <summary>Gets the XML Schema definition language (XSD) of the current SOAP type.</summary>
            <returns>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</returns>
        </member>
        <member name="M:ADSD.SoapHexBinary.GetXsdType">
            <summary>Returns the XML Schema definition language (XSD) of the current SOAP type.</summary>
            <returns>A <see cref="T:System.String" /> that indicates the XSD of the current SOAP type.</returns>
        </member>
        <member name="M:ADSD.SoapHexBinary.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary" /> class.</summary>
        </member>
        <member name="M:ADSD.SoapHexBinary.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary" /> class.</summary>
            <param name="value">A <see cref="T:System.Byte" /> array that contains a hexadecimal number. </param>
        </member>
        <member name="P:ADSD.SoapHexBinary.Value">
            <summary>Gets or sets the hexadecimal representation of a number.</summary>
            <returns>A <see cref="T:System.Byte" /> array containing the hexadecimal representation of a number.</returns>
        </member>
        <member name="M:ADSD.SoapHexBinary.ToString">
            <summary>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.Value" /> as a <see cref="T:System.String" />.</summary>
            <returns>A <see cref="T:System.String" /> that is obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.Value" />.</returns>
        </member>
        <member name="T:ADSD.StorePermissionFlags">
            <summary>Specifies the permitted access to X.509 certificate stores.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.NoFlags">
            <summary>Permission is not given to perform any certificate or store operations.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.CreateStore">
            <summary>The ability to create a new store.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.DeleteStore">
            <summary>The ability to delete a store.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.EnumerateStores">
            <summary>The ability to enumerate the stores on a computer.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.OpenStore">
            <summary>The ability to open a store.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.AddToStore">
            <summary>The ability to add a certificate to a store.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.RemoveFromStore">
            <summary>The ability to remove a certificate from a store.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.EnumerateCertificates">
            <summary>The ability to enumerate the certificates in a store.</summary>
        </member>
        <member name="F:ADSD.StorePermissionFlags.AllFlags">
            <summary>The ability to perform all certificate and store operations.</summary>
        </member>
        <member name="T:ADSD.SymmetricSecurityKey">
            <summary>Represents the abstract base class for all keys that are generated using symmetric algorithms.</summary>
        </member>
        <member name="M:ADSD.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key. </summary>
            <param name="algorithm">A URI that represents the cryptographic algorithm to use to generate the derived key.</param>
            <param name="label">An array of <see cref="T:System.Byte" /> that contains the label parameter for the cryptographic algorithm.</param>
            <param name="nonce">An array of <see cref="T:System.Byte" /> that contains the nonce that is used to create a derived key.</param>
            <param name="derivedKeyLength">The size of the derived key.</param>
            <param name="offset">The position at which the derived key is located in the byte array that is returned from this method.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the derived key.</returns>
        </member>
        <member name="M:ADSD.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
            <summary>When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm. </summary>
            <param name="algorithm">A cryptographic algorithm that decrypts cipher text, such as encrypted XML.</param>
            <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (<see langword="IV" />) for the specified algorithm.</param>
            <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the decryption transform.</returns>
        </member>
        <member name="M:ADSD.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
            <summary>When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm. </summary>
            <param name="algorithm">A cryptographic algorithm that encrypts XML.</param>
            <param name="iv">An array of <see cref="T:System.Byte" /> that contains the initialization vector (<see langword="IV" />) for the specified algorithm.</param>
            <returns>An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the encryption transform.</returns>
        </member>
        <member name="M:ADSD.SymmetricSecurityKey.GetIVSize(System.String)">
            <summary>When overridden in a derived class, gets the size, in bits, of the initialization vector (<see langword="IV" />) that is required for the specified cryptographic algorithm. </summary>
            <param name="algorithm">The cryptographic algorithm to get the size of the initialization vector (<see langword="IV" />).</param>
            <returns>The size, in bits, of the initialization vector (<see langword="IV" />) that is required for the cryptographic algorithm specified in the <paramref name="algorithm" /> parameter.</returns>
        </member>
        <member name="M:ADSD.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
            <summary>When overridden in a derived class, gets an instance of the specified keyed hash algorithm.</summary>
            <param name="algorithm">The keyed hash algorithm to get an instance of.</param>
            <returns>A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> that represents the keyed hash algorithm.</returns>
        </member>
        <member name="M:ADSD.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
            <summary>When overridden in a derived class, gets an instance of the specified symmetric algorithm.</summary>
            <param name="algorithm">The symmetric algorithm to get an instance of.</param>
            <returns>A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> that represents the symmetric algorithm.</returns>
        </member>
        <member name="M:ADSD.SymmetricSecurityKey.GetSymmetricKey">
            <summary>When overridden in a derived class, gets the bytes that represent the symmetric key.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the symmetric key.</returns>
        </member>
        <member name="T:ADSD.SymmetricSignatureProvider">
            <summary>
            Provides signing and verifying operations using a <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> and specifying an algorithm.
            </summary>
        </member>
        <member name="M:ADSD.SymmetricSignatureProvider.#ctor(ADSD.SymmetricSecurityKey,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricSignatureProvider" /> class that uses an <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> to create and / or verify signatures over a array of bytes.
            </summary>
            <param name="key">The <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> used for signing.</param>
            <param name="algorithm">The signature algorithm to use.</param>
            <exception cref="T:System.ArgumentNullException">'key' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'algorithm' is null.</exception>
            <exception cref="T:System.ArgumentException">'algorithm' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.KeySize' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumSymmetricKeySizeInBits" />.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)" /> throws.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)" /> returns null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey" /> throws.</exception>
        </member>
        <member name="M:ADSD.SymmetricSignatureProvider.Sign(System.Byte[])">
            <summary>
            Produces a signature over the 'input' using the <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> and 'algorithm' passed to <see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.SymmetricSecurityKey,System.String)" />.
            </summary>
            <param name="input">bytes to sign.</param>
            <returns>signed bytes</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null. </exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)" /> has been called.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:ADSD.SymmetricSignatureProvider.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies that a signature created over the 'input' matches the signature. Using <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> and 'algorithm' passed to <see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.SymmetricSecurityKey,System.String)" />.
            </summary>
            <param name="input">bytes to verify.</param>
            <param name="signature">signature to compare against.</param>
            <returns>true if computed signature matches the signature parameter, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'signature' is null.</exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0.</exception>
            <exception cref="T:System.ArgumentException">'signature.Length' == 0. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)" /> has been called.</exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:ADSD.SymmetricSignatureProvider.Dispose(System.Boolean)">
            <summary>Disposes of internal components.</summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer.</param>
        </member>
        <member name="M:ADSD.SymmetricSignatureProvider.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for equality. Hash size is fixed normally it is 32 bytes.
            The attempt here is to take the same time if an attacker shortens the signature OR changes some of the signed contents.
            </summary>
            <param name="a">One set of bytes to compare.</param>
            <param name="b">The other set of bytes to compare with.</param>
            <returns>true if the bytes are equal, false otherwise.</returns>
        </member>
        <member name="T:ADSD.TokenValidationParameters">
            <summary>
            Temp?
            </summary>
        </member>
        <member name="F:ADSD.TokenValidationParameters.DefaultAuthenticationType">
            <summary>
            Deafult authentication type
            </summary>
        </member>
        <member name="M:ADSD.TokenValidationParameters.CreateClaimsIdentity(ADSD.SecurityToken,System.String)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsIdentity" /> using:
            <para><see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AuthenticationType" /></para>
            <para>'NameClaimType' is calculated: If NameClaimTypeRetriever call that else use NameClaimType. If the result is a null or empty string, use <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType" /></para>.
            <para>'RoleClaimType' is calculated: If RoleClaimTypeRetriever call that else use RoleClaimType. If the result is a null or empty string, use <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType" /></para>.
            </summary>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> with Authentication, NameClaimType and RoleClaimType set.</returns>
        </member>
        <member name="P:ADSD.TokenValidationParameters.AuthenticationType">
            <summary>
            Gets or sets the AuthenticationType when creating a <see cref="T:System.Security.Claims.ClaimsIdentity" /> during token validation.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if 'value' is null or whitespace.</exception>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidAudience">
            <summary>
            Audience that is considered valid
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.RequireSignedTokens">
            <summary>
            Default: true.
            Gets or sets a value indicating whether a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> can be valid if not signed.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidIssuer">
            <summary>
            Issuer that is trusted
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidIssuers">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.ICollection`1" /> that contains valid issuers that will be used during token validation.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidateLifetime">
            <summary>
            Default: true.
            Gets or sets a boolean to control if the lifetime will be validated during token validation.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.RequireExpirationTime">
            <summary>
            Default: true.
            Gets or sets a value indicating whether tokens must have an 'expiration' value.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ClockSkew">
            <summary>
            Gets or sets the clock skew to apply when validating times
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.IssuerSigningTokens">
            <summary>
            Acceptable signing tokens
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidateAudience">
            <summary>
            Gets or sets a boolean to control if the audience will be validated during token validation.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidateIssuer">
            <summary>
            Default: true.
            Gets or sets a boolean to control if the issuer will be validated during token validation.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidAudiences">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.ICollection`1" /> that contains valid audiences that will be used during token validation.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidateIssuerSigningKey">
            <summary>
            Default: true.
            Gets or sets a boolean that controls if validation of the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that signed the securityToken is called.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.SaveSigninToken">
            <summary>
            Gets or sets a boolean to control if the original token is saved when a session is created.
            </summary>
            <remarks>The SecurityTokenValidator will use this value to save the orginal string that was validated.</remarks>
        </member>
        <member name="P:ADSD.TokenValidationParameters.TokenReplayCache">
            <summary>
            Gets or set the <see cref="T:System.IdentityModel.Tokens.ITokenReplayCache" /> that will be checked to help in detecting that a token has been 'seen' before.
            </summary>
        </member>
        <member name="P:ADSD.TokenValidationParameters.ValidateActor">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Actor" /> should be validated.
            </summary>
        </member>
        <member name="T:ADSD.Transform">
            <summary>
            XML Transform
            </summary>
        </member>
        <member name="P:ADSD.Transform.Algorithm">
            <summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
            <returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</returns>
        </member>
        <member name="P:ADSD.Transform.Resolver">
            <summary>Sets the current <see cref="T:System.Xml.XmlResolver" /> object.</summary>
            <returns>The current <see cref="T:System.Xml.XmlResolver" /> object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</returns>
        </member>
        <member name="P:ADSD.Transform.InputTypes">
            <summary>When overridden in a derived class, gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)" /> method of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</summary>
            <returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)" /> method of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</returns>
        </member>
        <member name="P:ADSD.Transform.OutputTypes">
            <summary>When overridden in a derived class, gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.Transform.GetOutput" /> methods of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</summary>
            <returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.Transform.GetOutput" /> methods of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</returns>
        </member>
        <member name="M:ADSD.Transform.GetXml">
            <summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</summary>
            <returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</returns>
        </member>
        <member name="M:ADSD.Transform.LoadInnerXml(System.Xml.XmlNodeList)">
            <summary>When overridden in a derived class, parses the specified <see cref="T:System.Xml.XmlNodeList" /> object as transform-specific content of a <see langword="&lt;Transform&gt;" /> element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object to match the <see langword="&lt;Transform&gt;" /> element.</summary>
            <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" /> object that specifies transform-specific content for the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object. </param>
        </member>
        <member name="M:ADSD.Transform.GetInnerXml">
            <summary>When overridden in a derived class, returns an XML representation of the parameters of the <see cref="T:System.Security.Cryptography.Xml.Transform" /> object that are suitable to be included as subelements of an XMLDSIG <see langword="&lt;Transform&gt;" /> element.</summary>
            <returns>A list of the XML nodes that represent the transform-specific content needed to describe the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object in an XMLDSIG <see langword="&lt;Transform&gt;" /> element.</returns>
        </member>
        <member name="M:ADSD.Transform.LoadInput(System.Object)">
            <summary>When overridden in a derived class, loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</summary>
            <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object. </param>
        </member>
        <member name="M:ADSD.Transform.GetOutput">
            <summary>When overridden in a derived class, returns the output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</summary>
            <returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</returns>
        </member>
        <member name="M:ADSD.Transform.GetOutput(System.Type)">
            <summary>When overridden in a derived class, returns the output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object of the specified type.</summary>
            <param name="type">The type of the output to return. This must be one of the types in the <see cref="P:System.Security.Cryptography.Xml.Transform.OutputTypes" /> property. </param>
            <returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object as an object of the specified type.</returns>
        </member>
        <member name="M:ADSD.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)">
            <summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" /> object. </summary>
            <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" /> object used to create a digest.</param>
            <returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" /> object.</returns>
        </member>
        <member name="P:ADSD.Transform.Context">
            <summary>Gets or sets an <see cref="T:System.Xml.XmlElement" /> object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object is running. </summary>
            <returns>An <see cref="T:System.Xml.XmlElement" /> object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" /> object is running.</returns>
        </member>
        <member name="P:ADSD.Transform.PropagatedNamespaces">
            <summary>Gets or sets a <see cref="T:System.Collections.Hashtable" /> object that contains the namespaces that are propagated into the signature. </summary>
            <returns>A <see cref="T:System.Collections.Hashtable" /> object that contains the namespaces that are propagated into the signature.</returns>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" /> property was set to <see langword="null" />.</exception>
        </member>
        <member name="T:ADSD.TransformChain">
            <summary>
            A sequence of transforms
            </summary>
        </member>
        <member name="M:ADSD.TransformChain.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> class.</summary>
        </member>
        <member name="M:ADSD.TransformChain.Add(ADSD.Transform)">
            <summary>Adds a transform to the list of transforms to be applied to the unsigned content prior to digest calculation.</summary>
            <param name="transform">The transform to add to the list of transforms. </param>
        </member>
        <member name="M:ADSD.TransformChain.GetEnumerator">
            <summary>Returns an enumerator of the transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</summary>
            <returns>An enumerator of the transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</returns>
        </member>
        <member name="P:ADSD.TransformChain.Count">
            <summary>Gets the number of transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</summary>
            <returns>The number of transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</returns>
        </member>
        <member name="P:ADSD.TransformChain.Item(System.Int32)">
            <summary>Gets the transform at the specified index in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</summary>
            <param name="index">The index into the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that specifies which transform to return. </param>
            <returns>The transform at the specified index in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="index" /> parameter is greater than the number of transforms.</exception>
        </member>
        <member name="T:ADSD.Validators">
            <summary>AudienceValidator</summary>
        </member>
        <member name="M:ADSD.Validators.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Determines if the audiences found in a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> are valid.
            </summary>
            <param name="audiences">The audiences found in the <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> being validated.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <exception cref="T:System.ArgumentNullException"> if 'vaidationParameters' is null.</exception>
            <exception cref="T:System.ArgumentNullException"> if 'audiences' is null and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidateAudience" /> is true.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenInvalidAudienceException"> if <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidAudience" /> is null or whitespace and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidAudiences" /> is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenInvalidAudienceException"> if none of the 'audiences' matched either <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidAudience" /> or one of <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidAudiences" />.</exception>
            <remarks>An EXACT match is required.</remarks>
        </member>
        <member name="M:ADSD.Validators.ValidateIssuer(System.String,ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Determines if an issuer found in a <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> is valid.
            </summary>
            <param name="issuer">The issuer to validate</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that is being validated.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <returns>The issuer to use when creating the "Claim"(s) in a "ClaimsIdentity".</returns>
            <exception cref="T:System.ArgumentNullException"> if 'vaidationParameters' is null.</exception>
            <exception cref="T:System.ArgumentNullException"> if 'issuer' is null or whitespace and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidateIssuer" /> is true.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenInvalidIssuerException"> if <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuer" /> is null or whitespace and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuers" /> is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenInvalidIssuerException"> if 'issuer' failed to matched either <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuer" /> or one of <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuers" />.</exception>
            <remarks>An EXACT match is required.</remarks>
        </member>
        <member name="M:ADSD.Validators.ValidateIssuerSecurityKey(ADSD.SecurityKey,ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Validates the <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that signed a <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.
            </summary>
            <param name="securityKey">The <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that signed the <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> being validated.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <exception cref="T:System.ArgumentNullException"> if 'vaidationParameters' is null.</exception>
        </member>
        <member name="M:ADSD.Validators.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},ADSD.SecurityToken,ADSD.TokenValidationParameters)">
            <summary>
            Validates the lifetime of a <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.
            </summary>
            <param name="notBefore">The 'notBefore' time found in the <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
            <param name="expires">The 'expiration' time found in the <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> being validated.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <exception cref="T:System.ArgumentNullException"> if 'vaidationParameters' is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNoExpirationException"> if 'expires.HasValue' is false and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.RequireExpirationTime" /> is true.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenInvalidLifetimeException"> if 'notBefore' is &gt; 'expires'.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException"> if 'notBefore' is &gt; DateTime.UtcNow.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException"> if 'expires' is &lt; DateTime.UtcNow.</exception>
            <remarks>All time comparisons apply <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ClockSkew" />.</remarks>
        </member>
        <member name="M:ADSD.Validators.ValidateTokenReplay(System.String,System.Nullable{System.DateTime},ADSD.TokenValidationParameters)">
            <summary>Validates if a token has been replayed.</summary>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> being validated.</param>
            <param name="expirationTime">When does the security token expire.</param>
            <param name="validationParameters"><see cref="T:System.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
            <exception cref="T:System.ArgumentNullException">if 'securityToken' is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">if 'validationParameters' is null or whitespace.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNoExpirationException">if <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.TokenReplayCache" /> is not null and expirationTime.HasValue is false. When a TokenReplayCache is set, tokens require an expiration time.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">if the 'securityToken' is found in the cache.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayAddFailedException">if the 'securityToken' could not be added to the <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.TokenReplayCache" />.</exception>
        </member>
        <member name="T:ADSD.X509AsymmetricSecurityKey">
            <summary>Represents an asymmetric key for X.509 certificates.</summary>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" /> class using the specified X.509 certificate. </summary>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that represents the X.509 certificate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.X509AsymmetricSecurityKey.KeySize">
            <summary>Gets the size, in bits, of the public key associated with the X.509 certificate.</summary>
            <returns>The size, in bits, of the public key associated with the X.509 certificate.</returns>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
            <summary>Decrypts the specified encrypted key using the specified cryptographic algorithm.</summary>
            <param name="algorithm">The cryptographic algorithm to decrypt the key.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the encrypted key.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the decrypted key.</returns>
            <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor does not have a private key.-or-The X.509 certificate has a private key, but it was not generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.-or-The X.509 certificate has a private key, it was generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm, but the <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm" /> property is <see langword="null" />.-or-The <paramref name="algorithm" /> parameter is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> and <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />.</exception>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
            <summary>Encrypts the specified encrypted key using the specified cryptographic algorithm.</summary>
            <param name="algorithm">The cryptographic algorithm to encrypt the key.</param>
            <param name="keyData">An array of <see cref="T:System.Byte" /> that contains the key to encrypt.</param>
            <returns>An array of <see cref="T:System.Byte" /> that contains the encrypted key.</returns>
            <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor has a public key that was not generated using the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.-or-The <paramref name="algorithm" /> parameter is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> and <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />.</exception>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
            <summary>Gets the specified asymmetric cryptographic algorithm.</summary>
            <param name="algorithm">The asymmetric algorithm to create.</param>
            <param name="privateKey">
            <see langword="true" /> when a private key is required to create the algorithm; otherwise, <see langword="false" />. </param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that represents the specified asymmetric cryptographic algorithm.</returns>
            <exception cref="T:System.NotSupportedException">
            <paramref name="privateKey" /> is <see langword="true" /> and the X.509 certificate specified in the constructor does not have a private key.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the public or private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />. -or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public or private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />. -or-
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
            <summary>Gets a cryptographic algorithm that generates a hash for a digital signature.</summary>
            <param name="algorithm">The hash algorithm.</param>
            <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> that generates hashes for digital signatures.</returns>
            <exception cref="T:System.NotSupportedException">
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
            <summary>Gets the de-formatter algorithm for the digital signature.</summary>
            <param name="algorithm">The de-formatter algorithm for the digital signature to get an instance of.</param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the de-formatter algorithm for the digital signature.</returns>
            <exception cref="T:System.NotSupportedException">
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the public key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />.-or-
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />,
            <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
            <summary>Gets the formatter algorithm for the digital signature.</summary>
            <param name="algorithm">The formatter algorithm for the digital signature to get an instance of.</param>
            <returns>An <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> that represents the formatter algorithm for the digital signature.</returns>
            <exception cref="T:System.NotSupportedException">The X.509 certificate specified in the constructor does not have a private key.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" /> and the private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.DSA" />.-or-
            <paramref name="algorithm" /> is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the private key for the X.509 certificate specified in the constructor is not of type <see cref="T:System.Security.Cryptography.RSA" />.-or-
            <paramref name="algorithm" /> is not supported. The supported algorithms are <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />,
            <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, and <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />.</exception>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.LevelUpRsa(System.Security.Cryptography.AsymmetricAlgorithm,System.String)">
            <summary>
            Try to upgrade RSA resolution
            </summary>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.HasPrivateKey">
            <summary>Gets a value that indicates whether the private key is a available. </summary>
            <returns>
            <see langword="true" /> when the private key is available; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm uses asymmetric keys.</summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm is supported by this class. </summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />, <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />, <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> and the public key is of the right type; otherwise, <see langword="false" />. See the remarks for details.</returns>
        </member>
        <member name="M:ADSD.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
            <summary>Gets a value that indicates whether the specified algorithm uses symmetric keys.</summary>
            <param name="algorithm">The cryptographic algorithm.</param>
            <returns>
            <see langword="true" /> when the specified algorithm is <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, or <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:ADSD.X509IssuerSerial">
            <summary>Represents the &lt;<see langword="X509IssuerSerial" />&gt; element of an XML digital signature.</summary>
        </member>
        <member name="P:ADSD.X509IssuerSerial.IssuerName">
            <summary>Gets or sets an X.509 certificate issuer's distinguished name.</summary>
            <returns>An X.509 certificate issuer's distinguished name.</returns>
        </member>
        <member name="P:ADSD.X509IssuerSerial.SerialNumber">
            <summary>Gets or sets an X.509 certificate issuer's serial number.</summary>
            <returns>An X.509 certificate issuer's serial number.</returns>
        </member>
        <member name="T:ADSD.X509IssuerSerialKeyIdentifierClause">
            <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security tokens using the distinguished name of the certificate issuer and the X.509 certificate's serial number.</summary>
        </member>
        <member name="M:ADSD.X509IssuerSerialKeyIdentifierClause.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> class using the specified distinguished name of the certificate issuer and the serial number of the X.509 certificate. </summary>
            <param name="issuerName">The distinguished name of the certificate authority that issued the X.509 certificate. Sets the value of the <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> property.</param>
            <param name="issuerSerialNumber">The serial number of the X.509 certificate. Sets the value of the <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="issuerName" /> is <see langword="null" />.-or-
            <paramref name="issuerSerialNumber" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509IssuerSerialKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> class using the specified X.509 certificate. </summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:ADSD.X509IssuerSerialKeyIdentifierClause.IssuerName">
            <summary>Gets the distinguished name of the certificate authority that issued the X.509 certificate.</summary>
            <returns>The distinguished name of the certificate authority that issued the X.509 certificate.</returns>
        </member>
        <member name="P:ADSD.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber">
            <summary>Gets the serial number of the X.509 certificate.</summary>
            <returns>The serial number of the X.509 certificate.</returns>
        </member>
        <member name="M:ADSD.X509IssuerSerialKeyIdentifierClause.Matches(ADSD.SecurityKeyIdentifierClause)">
            <summary>Returns a value that indicates whether the key identifier for this instance matches the specified key identifier.</summary>
            <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
            <returns>
            <see langword="true" /> if <paramref name="keyIdentifierClause" /> is a <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> type and the key identifier clauses match; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.X509IssuerSerialKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Returns a value that indicates whether the key identifier for this instance matches the specified X.509 certificate.</summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="certificate" /> has the same issuer name and issuer serial number as the current instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.X509IssuerSerialKeyIdentifierClause.Matches(System.String,System.String)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified issuer name and issuer serial number.</summary>
            <param name="issuerName">The distinguished name of the certificate authority that issued the X.509 certificate.</param>
            <param name="issuerSerialNumber">The serial number of the X.509 certificate.</param>
            <returns>
            <see langword="true" /> if the <paramref name="issuerName " />and <paramref name="issuerSerialNumber" /> parameters match the <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> and <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" /> properties; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.X509IssuerSerialKeyIdentifierClause.ToString">
            <summary>Returns the current object.</summary>
            <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
        </member>
        <member name="T:ADSD.X509RawDataKeyIdentifierClause">
            <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security token using the X.509 certificate's raw data.</summary>
        </member>
        <member name="M:ADSD.X509RawDataKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> class using the specified X.509 certificate. </summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509RawDataKeyIdentifierClause.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> class using the specified raw data of an X.509 certificate. </summary>
            <param name="certificateRawData">An array of <see cref="T:System.Byte" /> that contains the raw data of an X.509 certificate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificateRawData" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="certificateRawData" /> is zero length.</exception>
        </member>
        <member name="P:ADSD.X509RawDataKeyIdentifierClause.CanCreateKey">
            <summary>Gets a value that indicates whether a key can be created from the raw data of the X.509 certificate or byte array that is specified in the constructor. </summary>
            <returns>
            <see langword="true" /> in all cases.</returns>
        </member>
        <member name="M:ADSD.X509RawDataKeyIdentifierClause.CreateKey">
            <summary>Creates a key from the raw data of the X.509 certificate or byte array that is specified in the constructor.</summary>
            <returns>A <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" /> that contains the key(s) associated with the X.509 certificate.</returns>
        </member>
        <member name="M:ADSD.X509RawDataKeyIdentifierClause.GetX509RawData">
            <summary>Gets the raw data associated with the X.509 certificate.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the raw data associated with the X.509 certificate.</returns>
        </member>
        <member name="M:ADSD.X509RawDataKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified X.509 certificate.</summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="certificate" /> has the raw data that matches the current instance; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509RawDataKeyIdentifierClause.ToString">
            <summary>Returns the current object.</summary>
            <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
        </member>
        <member name="T:ADSD.X509SecurityKey">
            <summary>Security key that allows access to cert</summary>
        </member>
        <member name="M:ADSD.X509SecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Instantiates a <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> using a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
            </summary>
            <param name="certificate"> cert to use.</param>
        </member>
        <member name="P:ADSD.X509SecurityKey.Certificate">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
        </member>
        <member name="T:ADSD.X509SecurityToken">
            <summary>Represents a security token that is based upon an X.509 certificate.</summary>
        </member>
        <member name="M:ADSD.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> class using the specified X.509 certificate. </summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> class using the specified X.509 certificate and unique identifier. </summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> property.</param>
            <param name="id">A unique identifier of the security token. Sets the <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Id" /> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.-or-
            <paramref name="id" /> is null.</exception>
        </member>
        <member name="P:ADSD.X509SecurityToken.Id">
            <summary>Gets a unique identifier of the security token.</summary>
            <returns>A unique identifier of the security token.</returns>
        </member>
        <member name="P:ADSD.X509SecurityToken.SecurityKeys">
            <summary>Gets the cryptographic keys associated with the security token.</summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the security token.</returns>
        </member>
        <member name="P:ADSD.X509SecurityToken.ValidFrom">
            <summary>Gets the first instant in time at which this security token is valid.</summary>
            <returns>A <see cref="T:System.DateTime" /> that represents the instant in time at which this security token is first valid.</returns>
        </member>
        <member name="P:ADSD.X509SecurityToken.ValidTo">
            <summary>Gets the last instant in time at which this security token is valid.</summary>
            <returns>A <see cref="T:System.DateTime" /> that represents the last instant in time at which this security token is valid.</returns>
        </member>
        <member name="P:ADSD.X509SecurityToken.Certificate">
            <summary>Gets the X.509 certificate associated with the security token.</summary>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</returns>
        </member>
        <member name="M:ADSD.X509SecurityToken.CanCreateKeyIdentifierClause``1">
            <summary>Gets a value indicating whether this security token is capable of creating the specified key identifier.</summary>
        </member>
        <member name="M:ADSD.X509SecurityToken.CreateKeyIdentifierClause``1">
            <summary>Creates the specified key identifier clause.</summary>
            <typeparam name="T">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that specifies the key identifier to create.</typeparam>
            <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that is a key identifier clause for the security token.</returns>
        </member>
        <member name="M:ADSD.X509SecurityToken.MatchesKeyIdentifierClause(ADSD.SecurityKeyIdentifierClause)">
            <summary>Returns a value indicating whether the key identifier for this instance is equal to the specified key identifier.</summary>
            <param name="keyIdentifierClause">An <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to this instance.</param>
            <returns>
            <see langword="true" /> if <paramref name="keyIdentifierClause" /> is one of the <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />, <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" />, <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" />, or <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> types and the key identifier clauses match; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.X509SecurityToken.Dispose">
            <summary>Releases all resources used by the <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />. </summary>
        </member>
        <member name="M:ADSD.X509SecurityToken.ThrowIfDisposed">
            <summary>Throws an exception if the <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" /> method has been called for this instance.</summary>
            <exception cref="T:System.ObjectDisposedException">the <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" />  method has been called for this instance.</exception>
        </member>
        <member name="T:ADSD.X509SigningCredentials">
            <summary>Represents an X.509 token used as the signing credential.</summary>
        </member>
        <member name="M:ADSD.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate.</summary>
            <param name="certificate">The X.509 certificate.</param>
        </member>
        <member name="M:ADSD.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate, signature algorithm, and digest algorithm. </summary>
            <param name="certificate">The X.509 certificate.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="digestAlgorithm">The digest algorithm.</param>
        </member>
        <member name="M:ADSD.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,ADSD.SecurityKeyIdentifier)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate and security key identifier. </summary>
            <param name="certificate">The X.509 certificate.</param>
            <param name="ski">The security key identifier.</param>
        </member>
        <member name="M:ADSD.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,ADSD.SecurityKeyIdentifier,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm. </summary>
            <param name="certificate">The X.509 certificate.</param>
            <param name="ski">The security key identifier.</param>
            <param name="signatureAlgorithm">The signature algorithm.</param>
            <param name="digestAlgorithm">The digest algorithm.</param>
        </member>
        <member name="P:ADSD.X509SigningCredentials.Certificate">
            <summary>Gets the X.509 certificate.</summary>
            <returns>The X.509 certificate.</returns>
        </member>
        <member name="T:ADSD.X509SubjectKeyIdentifierClause">
            <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security token using the X.509 certificate's subject key identifier extension.</summary>
        </member>
        <member name="M:ADSD.X509SubjectKeyIdentifierClause.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" /> class using the specified subject key identifier. </summary>
            <param name="ski">An array of <see cref="T:System.Byte" /> that contains the subject key identifier.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ski" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509SubjectKeyIdentifierClause.GetX509SubjectKeyIdentifier">
            <summary>Gets the subject key identifier.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the subject key identifier.</returns>
        </member>
        <member name="M:ADSD.X509SubjectKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the key identifier of the specified X.509 certificate.</summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="certificate" /> has the same subject key identifier as the current instance; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509SubjectKeyIdentifierClause.TryCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2,ADSD.X509SubjectKeyIdentifierClause@)">
            <summary>Creates a key identifier clause using the specified X.509 certificate.</summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to create the key identifier clause for.</param>
            <param name="keyIdentifierClause">When this method returns, contains a <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" /> that represents the key identifier clause. This parameter is passed uninitialized. </param>
            <returns>
            <see langword="true" /> when a key identifier clause can be created for the specified X.509 certificate; otherwise, <see langword="false" />. </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509SubjectKeyIdentifierClause.CanCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Gets a value that indicates whether a key identifier clause can be created for the specified X.509 certificate. </summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
            <returns>
            <see langword="true" /> if a key identifier clause can be created for <paramref name="certificate" />; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509SubjectKeyIdentifierClause.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
        </member>
        <member name="T:ADSD.X509ThumbprintKeyIdentifierClause">
            <summary>Represents a key identifier clause that identifies a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> security tokens using the X.509 certificate's thumbprint.</summary>
        </member>
        <member name="M:ADSD.X509ThumbprintKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> class using the specified X.509 certificate. </summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="certificate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.X509ThumbprintKeyIdentifierClause.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> class using the specified thumbprint for an X.509 certificate. </summary>
            <param name="thumbprint">An array of <see cref="T:System.Byte" /> that contains the thumbprint of the X.509 certificate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="thumbprint" /> is <see langword="null" />.-or-
            <paramref name="thumbprint" /> is zero length.</exception>
        </member>
        <member name="M:ADSD.X509ThumbprintKeyIdentifierClause.GetX509Thumbprint">
            <summary>Returns the thumbprint for the X.509 certificate.</summary>
            <returns>An array of <see cref="T:System.Byte" /> that contains the thumbprint of the X.509 certificate.</returns>
        </member>
        <member name="M:ADSD.X509ThumbprintKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified X.509 certificate's thumbprint.</summary>
            <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X.509 certificate to compare.</param>
            <returns>
            <see langword="true" /> if <paramref name="certificate" /> has the same thumbprint as the current instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ADSD.X509ThumbprintKeyIdentifierClause.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A <see cref="T:System.String" /> that represents the current object.</returns>
        </member>
        <member name="T:ADSD.XmlDsigEnvelopedSignatureTransform">
            <summary>Represents the enveloped signature transform for an XML digital signature as defined by the W3C.</summary>
        </member>
        <member name="M:ADSD.XmlDsigEnvelopedSignatureTransform.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> class.</summary>
        </member>
        <member name="M:ADSD.XmlDsigEnvelopedSignatureTransform.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> class with comments, if specified.</summary>
            <param name="includeComments">
            <see langword="true" /> to include comments; otherwise, <see langword="false" />. </param>
        </member>
        <member name="P:ADSD.XmlDsigEnvelopedSignatureTransform.InputTypes">
            <summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput(System.Object)" /> method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object.</summary>
            <returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput(System.Object)" /> method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object.</returns>
        </member>
        <member name="P:ADSD.XmlDsigEnvelopedSignatureTransform.OutputTypes">
            <summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput" /> methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object.</summary>
            <returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput" /> methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object.</returns>
        </member>
        <member name="M:ADSD.XmlDsigEnvelopedSignatureTransform.LoadInnerXml(System.Xml.XmlNodeList)">
            <summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" /> as transform-specific content of a <see langword="&lt;Transform&gt;" /> element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object to match the <see langword="&lt;Transform&gt;" /> element.</summary>
            <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" /> to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object. </param>
        </member>
        <member name="M:ADSD.XmlDsigEnvelopedSignatureTransform.GetInnerXml">
            <summary>Returns an XML representation of the parameters of an <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object that are suitable to be included as subelements of an XMLDSIG <see langword="&lt;Transform&gt;" /> element.</summary>
            <returns>A list of the XML nodes that represent the transform-specific content needed to describe the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object in an XMLDSIG <see langword="&lt;Transform&gt;" /> element.</returns>
        </member>
        <member name="M:ADSD.XmlDsigEnvelopedSignatureTransform.LoadInput(System.Object)">
            <summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object.</summary>
            <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The containing XML document is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.XmlDsigEnvelopedSignatureTransform.GetOutput">
            <summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object.</summary>
            <returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The containing XML document is <see langword="null" />.</exception>
        </member>
        <member name="M:ADSD.XmlDsigEnvelopedSignatureTransform.GetOutput(System.Type)">
            <summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object of type <see cref="T:System.Xml.XmlNodeList" />.</summary>
            <param name="type">The type of the output to return. <see cref="T:System.Xml.XmlNodeList" /> is the only valid type for this parameter. </param>
            <returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" /> object of type <see cref="T:System.Xml.XmlNodeList" />.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="type" /> parameter is not an <see cref="T:System.Xml.XmlNodeList" /> object.</exception>
        </member>
        <member name="T:ADSD.XmlDsigExcC14NTransform">
            <summary>Represents the exclusive C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), without comments.</summary>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> class. </summary>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> class specifying a value that determines whether to include comments. </summary>
            <param name="includeComments">
            <see langword="true" /> to include comments; otherwise, <see langword="false" />.</param>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> class specifying a list of namespace prefixes to canonicalize using the standard canonicalization algorithm. </summary>
            <param name="inclusiveNamespacesPrefixList">The namespace prefixes to canonicalize using the standard canonicalization algorithm.</param>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.#ctor(System.Boolean,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> class specifying whether to include comments, and specifying a list of namespace prefixes. </summary>
            <param name="includeComments">
            <see langword="true" /> to include comments; otherwise, <see langword="false" />.</param>
            <param name="inclusiveNamespacesPrefixList">The namespace prefixes to canonicalize using the standard canonicalization algorithm.</param>
        </member>
        <member name="P:ADSD.XmlDsigExcC14NTransform.InclusiveNamespacesPrefixList">
            <summary>Gets or sets a string that contains namespace prefixes to canonicalize using the standard canonicalization algorithm. </summary>
            <returns>A string that contains namespace prefixes to canonicalize using the standard canonicalization algorithm.</returns>
        </member>
        <member name="P:ADSD.XmlDsigExcC14NTransform.InputTypes">
            <summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInput(System.Object)" /> method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</summary>
            <returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInput(System.Object)" /> method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</returns>
        </member>
        <member name="P:ADSD.XmlDsigExcC14NTransform.OutputTypes">
            <summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetOutput" /> methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</summary>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.LoadInnerXml(System.Xml.XmlNodeList)">
            <summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" /> object as transform-specific content of a <see langword="&lt;Transform&gt;" /> element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object to match the <see langword="&lt;Transform&gt;" /> element.</summary>
            <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" /> object that specifies transform-specific content for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</param>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.LoadInput(System.Object)">
            <summary>When overridden in a derived class, loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</summary>
            <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="obj" /> parameter is not a <see cref="T:System.IO.Stream" /> object.-or-The <paramref name="obj" /> parameter is not an <see cref="T:System.Xml.XmlDocument" /> object.-or-The <paramref name="obj" /> parameter is not an <see cref="T:System.Xml.XmlNodeList" /> object.</exception>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.GetInnerXml">
            <summary>Returns an XML representation of the parameters of a <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object that are suitable to be included as subelements of an XMLDSIG <see langword="&lt;Transform&gt;" /> element.</summary>
            <returns>A list of the XML nodes that represent the transform-specific content needed to describe the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object in an XMLDSIG <see langword="&lt;Transform&gt;" /> element.</returns>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.GetOutput">
            <summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object</summary>
            <returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</returns>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.GetOutput(System.Type)">
            <summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object as an object of the specified type.</summary>
            <param name="type">The type of the output to return. This must be one of the types in the <see cref="P:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.OutputTypes" /> property.</param>
            <returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object as an object of the specified type.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="type" /> parameter is not a <see cref="T:System.IO.Stream" /> object.-or-The <paramref name="type" /> parameter does not derive from a <see cref="T:System.IO.Stream" /> object.</exception>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NTransform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)">
            <summary>Returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</summary>
            <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" /> object used to create a digest.</param>
            <returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" /> object.</returns>
        </member>
        <member name="T:ADSD.XmlDsigExcC14NWithCommentsTransform">
            <summary>Represents the exclusive C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), with comments.</summary>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NWithCommentsTransform.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform" /> class. </summary>
        </member>
        <member name="M:ADSD.XmlDsigExcC14NWithCommentsTransform.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform" /> class specifying a list of namespace prefixes to canonicalize using the standard canonicalization algorithm.</summary>
            <param name="inclusiveNamespacesPrefixList">The namespace prefixes to canonicalize using the standard canonicalization algorithm.</param>
        </member>
        <member name="T:ADSD.JsonWebKey">
            <summary>
            https://tools.ietf.org/html/rfc7517#section-4
            </summary>
        </member>
        <member name="P:ADSD.JsonWebKey.kty">
            <summary> Key algorithm type </summary>
        </member>
        <member name="P:ADSD.JsonWebKey.use">
            <summary> Key purpose </summary>
        </member>
        <member name="P:ADSD.JsonWebKey.kid">
            <summary> Key identifier </summary>
        </member>
        <member name="P:ADSD.JsonWebKey.x5t">
            <summary> X509 Thumbprint </summary>
        </member>
        <member name="P:ADSD.JsonWebKey.n">
            <summary> RSA modulus </summary>
        </member>
        <member name="P:ADSD.JsonWebKey.e">
            <summary> RSA exponent </summary>
        </member>
        <member name="P:ADSD.JsonWebKey.x5c">
            <summary> X509 certificates </summary>
        </member>
        <member name="T:ADSD.JwkSet">
            <summary>
            https://tools.ietf.org/html/rfc7517
            </summary>
        </member>
        <member name="P:ADSD.JwkSet.keys">
            <summary>
            List of known keys
            </summary>
        </member>
        <member name="T:ADSD.SecurityConfig">
            <summary>
            Config settings to create or verify an AAD JWT token
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.TenantKey">
            <summary>
            Security tennant key. Must be the same across the AAD organisation.
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.AadAuthorityRoot">
            <summary>
            Optional: Signing authority.
            Used only for generating tokens
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.ClientId">
            <summary>
            Optional: Application ID from AAD instance
            Used only for generating tokens
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.AppKey">
            <summary>
            Optional: Secret key owned by the Application in the AAD instance
            Used only for generating tokens
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.ResourceId">
            <summary>
            Optional: Resource ID being authorised.
            Used only for generating tokens.
            <para></para>
            In practice, this is the same as the `Audience` ID
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.Audience">
            <summary>
            The required audience any token must be signed for.
            In practice, it's the same as the `ResourceID` used to create the token.
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.KeyDiscoveryUrl">
            <summary>
            X5C AAD signing key source.
            <para>For AAD, this is almost always "https://login.microsoftonline.com/common/discovery/keys"</para>
            </summary>
        </member>
        <member name="F:ADSD.SecurityConfig.AadTokenIssuer">
            <summary>
            URL Used to authenticate a security token
            <para>For AAD, this is almost always "https://sts.windows.net/"</para>
            </summary>
        </member>
        <member name="T:ADSD.SecurityOutcome">
            <summary>
            A simple pass or fail result for a token check
            </summary>
        </member>
        <member name="F:ADSD.SecurityOutcome.Fail">
            <summary>
            Security check failed
            </summary>
        </member>
        <member name="F:ADSD.SecurityOutcome.Pass">
            <summary>
            Security check passed
            </summary>
        </member>
        <member name="T:ADSD.SigningKeys">
            <summary>
            A caching store of JWT signing keys
            </summary>
        </member>
        <member name="F:ADSD.SigningKeys.KeyCache">
            <summary>
            Map of kid=>x5c data
            </summary>
        </member>
        <member name="M:ADSD.SigningKeys.AllAvailableKeys">
            <summary>
            Return a disposable collection of security tokens for all known signing keys.
            <para>Caller must dispose</para>
            </summary>
        </member>
        <member name="M:ADSD.SigningKeys.PublicKeyForKid(System.String)">
            <summary>
            Look up the Public Key for a given KID.
            KID is case sensitive. Returns `null` if no public key is found.
            <para>A new certificate is created for each call, and should be disposed by the caller</para>
            </summary>
        </member>
        <member name="M:ADSD.SigningKeys.RefreshKeys(System.String,System.TimeSpan)">
            <summary>
            Ensure signing keys are available and fresh.
            If no keys are loaded, this method will block. Otherwise,
            any refresh will happen in the background
            </summary>
        </member>
        <member name="M:ADSD.SigningKeys.UpdateKeyCache(System.String)">
            <summary>
            Update the key cache on a background thread. This method will return before the new keys are available.
            </summary>
        </member>
        <member name="M:ADSD.SigningKeys.LoadCacheSync(System.String)">
            <summary>
            Update the key cache synchronously.
            This method will not return until keys are read.
            </summary>
        </member>
        <member name="M:ADSD.SigningKeys.ClientWithDefaultProxy">
            <summary>
            Create a HttpClient with system default proxy
            </summary>
        </member>
        <member name="T:ADSD.Sync">
            <summary>
            Helper class to properly wait for async tasks
            </summary>
        </member>
        <member name="M:ADSD.Sync.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Run an async function synchronously and return the result
            </summary>
        </member>
        <member name="T:SkinnyJson.Json">
            <summary>
            SkinnyJson entry point. Use the static methods of this class to interact with JSON data
            </summary>
        </member>
        <member name="F:SkinnyJson.Json.DefaultStreamEncoding">
            <summary>
            String encoding to use for streams, when no specific encoding is provided.
            Initial value is UTF8.
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.Freeze(System.Object)">
            <summary> Turn an object into a JSON string </summary>
        </member>
        <member name="M:SkinnyJson.Json.Freeze(System.Object,System.IO.Stream,System.Text.Encoding)">
            <summary> Write an object to a stream as a JSON string </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost(System.String)">
            <summary> Turn a JSON string into a detected object </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost(System.Byte[])">
            <summary> Turn a JSON byte array into a detected object </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost(System.IO.Stream,System.Text.Encoding)">
            <summary> Turn a JSON data stream into a detected object </summary>
        </member>
        <member name="M:SkinnyJson.Json.WrapperType(System.Object)">
            <summary> Return the type name that SkinnyJson will use for the serialising the object </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost``1(System.String)">
            <summary> Turn a JSON string into a specific object </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost``1(System.IO.Stream,System.Text.Encoding)">
            <summary> Turn a JSON data stream into a specific object </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost(System.String,System.Type)">
            <summary> Turn a JSON string into a runtime type </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost(System.Byte[],System.Type)">
            <summary> Turn a JSON byte array into a runtime type </summary>
        </member>
        <member name="M:SkinnyJson.Json.Defrost(System.IO.Stream,System.Type,System.Text.Encoding)">
            <summary> Turn a JSON data stream into a runtime type </summary>
        </member>
        <member name="M:SkinnyJson.Json.DefrostFromPath``1(System.String,System.String)">
            <summary>
            Turn a sub-path of a JSON document into an enumeration of values, by specific type
            </summary>
            <remarks>This is intended to extract useful fragments from repository-style files</remarks>
            <typeparam name="T">Type of the fragments to be returned</typeparam>
            <param name="path">Dotted path through document. If the path can't be found, an empty enumeration will be returned.
            An empty path is equivalent to `Defrost&lt;T&gt;`</param>
            <param name="json">The JSON document string to read</param>
        </member>
        <member name="M:SkinnyJson.Json.Clone``1(``0)">
            <summary> Create a copy of an object through serialisation </summary>
        </member>
        <member name="M:SkinnyJson.Json.Parse(System.String)">
            <summary>Read a JSON object into an anonymous .Net object</summary>
        </member>
        <member name="M:SkinnyJson.Json.Beautify(System.String)">
            <summary>Pretty print a JSON string. This is done without value parsing.</summary>
        </member>
        <member name="M:SkinnyJson.Json.BeautifyStream(System.IO.Stream,System.Text.Encoding,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Pretty print a JSON data stream to another stream.
            This is done without value parsing or buffering, so very large streams can be processed.
            The input and output encodings can be the same or different.
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.FillObject(System.Object,System.String)">
            <summary>Fill the members of an .Net object from a JSON object string</summary>
        </member>
        <member name="F:SkinnyJson.Json.DefaultParameters">
            <summary>
            You can set these parameters globally for all calls
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.SelectObjects``1(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Pick items out of a parsed object using dotted string path
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.PathWalk``1(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.String[],System.Int32)">
            <summary>
            Recursive helper for SelectObjects˂T˃
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.ToObject(System.Object,System.Type,System.Text.Encoding)">
            <summary>
            Create a new object by type, using input json data
            </summary>
            <param name="json">Either a stream of utf-8 data or an in-memory `string`</param>
            <param name="type">Target return type</param>
            <param name="encoding">String encoding to use, if reading from a stream</param>
        </member>
        <member name="M:SkinnyJson.Json.StrengthenType(System.Type,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Try to decode a parsed json object into a new type instance
            </summary>
            <param name="type">Target output type</param>
            <param name="decodedObject">raw memory map of json</param>
            <param name="globalTypes">cache of typematches</param>
        </member>
        <member name="M:SkinnyJson.Json.ParserFromStreamOrStringOrBytes(System.Object,System.Text.Encoding)">
            <summary>
            Pass in either a string or a stream and get back a parser instance
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.GenericListType(System.Type)">
            <summary>
            Make an IList˂T˃() instance for a runtime type
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.GetTypeAssemblyName(System.Type)">
            <summary>
            Get a shortened string name for a type's containing assembly
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.ShortenName(System.String)">
            <summary>
            Shorten an assembly qualified name
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.GetTypeFromCache(System.String)">
            <summary>
            Try to get or build a type for a given type-name
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.FastCreateInstance(System.Type)">
            <summary>
            Try to make a new instance of a type.
            Will drop down to 'SlowCreateInstance' in special cases
            </summary>
        </member>
        <member name="T:SkinnyJson.Json.GenericSetter">
            <param name="target">object instance to accept the value</param>
            <param name="value">value of property to set</param>
            <param name="key">optional key for dictionaries</param>
        </member>
        <member name="M:SkinnyJson.Json.ParseDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Object)">
            <summary>
            Read a weakly-typed dictionary tree into a strong type. If the keys do not match exactly,
            all matching field/properties will be filled.
            If *no* keys match the target type, this will return `null`
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.MapJsonValueToObject(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},SkinnyJson.SafeDictionary{System.String,SkinnyJson.Json.TypePropertyInfo})">
            <summary>
            Map json value dictionary to the properties and fields of a target object instance
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.WriteValueToTypeInstance(System.String,System.Object,SkinnyJson.Json.TypePropertyInfo,System.Object)">
            <summary>
            Inject a value into an object's property
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.GetProperties(System.Type,System.String)">
            <summary>
            Read the properties and public fields of a type.
            In special cases, this will also read private fields
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.CreateMyProp(System.Type)">
            <summary>
            Read reflection data for a type
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.CreateGetMethod(System.Reflection.PropertyInfo)">
            <summary>
            Try to create a value-setting proxy for an object property
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.CreateSetMethod(System.Reflection.PropertyInfo)">
            <summary>
            Try to create a value-setting proxy for an object property
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.ChangeType(System.Object,System.Type)">
            <summary>
            Convert between runtime types
            </summary>
        </member>
        <member name="M:SkinnyJson.Json.GetGetters(System.Type)">
            <summary>
            Return a list of propery/field access proxies for a type
            </summary>
        </member>
        <member name="T:SkinnyJson.Json.TypePropertyInfo">
            <summary>
            Record of reflected type infor for fields and properties on objects
            </summary>
        </member>
        <member name="T:SkinnyJson.JsonParameters">
            <summary>
            Parameters for serialising and deserialising.
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.UseOptimizedDatasetSchema">
            <summary>
            Use a special format for Sql Datasets. Default true
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.UseFastGuid">
            <summary>
            Use Base64 encoding for Guids. If false, uses Hex.
            Default true
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.SerializeNullValues">
            <summary>
            Insert null values into JSON output. Otherwise remove field.
            Default true
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.UseUtcDateTime">
            <summary>
            Force datetimes to UTC. Default true
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.ShowReadOnlyProperties">
            <summary>
            Serialise properties that can't be written on deserialise. Default false
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.UsingGlobalTypes">
            <summary>
            Declare types once at the start of a document. Otherwise declare in each object.
            Default true, but overridden by `EnableAnonymousTypes`
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.IgnoreCaseOnDeserialize">
            <summary>
            Allow case insensitive matching on deserialise. Default false
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.EnableAnonymousTypes">
            <summary>
            Default true. If false, source type information will be included in serialised output.<para></para>
            Sets `UseExtensions` and `UsingGlobalTypes` to false.
            Directly serialising an anonymous type will use these settings for that call, without needing a global setting.
            </summary>
        </member>
        <member name="F:SkinnyJson.JsonParameters.UseExtensions">
            <summary>
            Add type and schema information to output JSON, using $type, $types, $schema and $map properties.
            Default true, but overridden by `EnableAnonymousTypes`
            </summary>
        </member>
        <member name="T:SkinnyJson.JsonParser">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes ArrayList and Hashtable.
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:SkinnyJson.JsonParser.#ctor(System.String,System.Boolean)">
            <summary>
            Create a parser for an JSON string loaded in memory
            </summary>
            <param name="json">The input JSON string</param>
            <param name="ignorecase">If `true`, all property names will be lowercased</param>
        </member>
        <member name="M:SkinnyJson.JsonParser.#ctor(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
            Create a parser for an JSON string accessible as a stream
            </summary>
            <param name="json">The input JSON stream</param>
            <param name="ignorecase">If `true`, all property names will be lowercased</param>
            <param name="encoding">String encoding to use</param>
        </member>
        <member name="M:SkinnyJson.JsonParser.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Create a parser for an JSON byte array loaded in memory
            </summary>
            <param name="json">The input JSON byte array</param>
            <param name="ignorecase">If `true`, all property names will be lowercased</param>
        </member>
        <member name="M:SkinnyJson.JsonParser.Decode">
            <summary>
            Decode the provided JSON into an object representation
            </summary>
        </member>
        <member name="M:SkinnyJson.JsonSerializer.ConvertToJson(System.Object,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Serialise a .Net object to a writable stream.
            Ignores the 'globalTypes' setting, will always either write types inline or elide them.
            </summary>
        </member>
        <member name="M:SkinnyJson.JsonSerializer.ConvertToJson(System.Object)">
            <summary>
            Output a .Net object as a JSON string.
            Supports global types
            </summary>
        </member>
        <member name="M:SkinnyJson.JsonSerializer.WriteValue(System.Object)">
            <summary>
            This is the root of the serialiser.
            </summary>
        </member>
        <member name="M:SkinnyJson.JsonSerializer.WriteStringFast(System.String)">
            <summary>
            Directly output strings we know won't need escape sequences
            </summary>
        </member>
        <member name="M:SkinnyJson.JsonSerializer.WriteString(System.String)">
            <summary>
            Write a string to the output, converting characters to escape sequences where needed.
            </summary>
        </member>
        <member name="T:SkinnyJson.SafeDictionary`2">
            <summary>
            Dictionary with thread locks
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>Marked element could be <c>null</c></summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>Marked element could never be <c>null</c></summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>IEnumerable, Task.Result, or Lazy.Value property can never be null.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>IEnumerable, Task.Result, or Lazy.Value property can be null.</summary>
        </member>
    </members>
</doc>
